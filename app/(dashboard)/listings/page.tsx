"use client";
import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Button } from "../../components/ui/button";
import {
  Search,
  Filter,
  Eye,
  MapPin,
  Star,
  QrCode,
  Tag,
  Clock,
  TrendingUp,
  TrendingDown,
  CheckCircle,
  AlertCircle,
  Bookmark,
  EyeOff,
  X,
  Calendar,
  DollarSign,
  User,
  Package,
  HelpCircle,
  ArrowDown,
  MessageCircle,
  Check,
  Shield,
  ExternalLink,
} from "lucide-react";
import { getNeighborhoodName } from "../../lib/zipcodes";
import QuestionsDisplay from "../../components/QuestionsDisplay";

// Mock data for fallback (will be replaced with real API data)
const mockListings = [
  {
    // Auto-generated by ConsignCrew
    item_id: "cc_001_2025_01_15_001",
    seller_id: "user_123",
    created_at: "2025-01-15T10:30:00Z",
    status: "LISTED",
    qr_code_url:
      "https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=cc_001_2025_01_15_001",
    image_urls_staged: [
      "https://images.unsplash.com/photo-1555041469-a586c61ea9bc?w=400&h=300&fit=crop",
    ],
    gtin: "1234567890123",
    insights_query: "modern leather sofa furniture seating living room",
    price_range_low: 750,
    price_range_high: 1100,
    list_price: 899.99,
    reserve_price: 650.0,
    fee_pct: 8.5,
    estimated_retail_price: 1299.99,

    // Provided by seller
    title: "Modern Leather Sofa",
    description:
      "Premium leather sofa in excellent condition. Perfect for living room or office. Features high-quality construction and comfortable seating. This sofa has been well-maintained and shows minimal signs of wear. The leather is supple and the cushions provide excellent support. Includes matching throw pillows.",
    category_id: "furniture_seating_sofas",
    condition: "EXCELLENT",
    image_urls_original: [
      "https://images.unsplash.com/photo-1555041469-a586c61ea9bc?w=400&h=300&fit=crop",
    ],
    serial_number: "SOFA-2024-001",
    model_number: "MLS-3S-2024",
    brand: "Ashley Furniture",
    dimensions: '84" W x 35" D x 38" H',
    discount_schedule: "Turbo-30",
    zip_code: "77019",

    // Display fields
    seller_name: "FurniturePro",
    location: "River Oaks / Upper Kirby",
    rating: 4.8,
    reviews: 12,
    timeLeft: "2d 14h",
  },
  {
    // Auto-generated by ConsignCrew
    item_id: "cc_002_2025_01_14_002",
    seller_id: "user_456",
    created_at: "2025-01-14T14:20:00Z",
    status: "LISTED",
    qr_code_url:
      "https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=cc_002_2025_01_14_002",
    image_urls_staged: [
      "https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?w=400&h=300&fit=crop",
    ],
    gtin: "9876543210987",
    insights_query: "iphone 13 pro smartphone mobile electronics",
    price_range_low: 650,
    price_range_high: 850,
    list_price: 749.99,
    reserve_price: 550.0,
    fee_pct: 7.5,
    estimated_retail_price: 999.99,

    // Provided by seller
    title: "iPhone 13 Pro - 256GB",
    description:
      "iPhone 13 Pro in good condition. Includes original box and charger. Minor scratches on screen protector. The phone has been used for about 18 months and is in excellent working condition. Battery health is at 87% and all features work perfectly. No water damage or major repairs.",
    category_id: "electronics_mobile_phones",
    condition: "GOOD",
    image_urls_original: [
      "https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?w=400&h=300&fit=crop",
    ],
    serial_number: "DNQH2K3L4M5N",
    model_number: "A2483",
    brand: "Apple",
    dimensions: '5.78" H x 2.82" W x 0.30" D',
    discount_schedule: "Classic-60",
    zip_code: "77056",

    // Display fields
    seller_name: "TechTrader",
    location: "Galleria / Tanglewood",
    rating: 4.9,
    reviews: 8,
    timeLeft: "1d 8h",
  },
  {
    // Auto-generated by ConsignCrew
    item_id: "cc_003_2025_01_13_003",
    seller_id: "user_789",
    created_at: "2025-01-13T09:15:00Z",
    status: "LISTED",
    qr_code_url:
      "https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=cc_003_2025_01_13_003",
    image_urls_staged: [
      "https://images.unsplash.com/photo-1533090481720-856c6e3c1fdc?w=400&h=300&fit=crop",
    ],
    gtin: null,
    insights_query: "vintage mid-century coffee table furniture",
    price_range_low: 400,
    price_range_high: 600,
    list_price: 450.0,
    reserve_price: 350.0,
    fee_pct: 9.0,
    estimated_retail_price: null,

    // Provided by seller
    title: "Vintage Mid-Century Coffee Table",
    description:
      'Authentic mid-century modern coffee table. Solid wood construction with beautiful patina. Perfect condition. This is a genuine piece from the 1960s, not a reproduction. The wood has developed a beautiful natural patina over the years. Dimensions are 48" x 24" x 18" high. Perfect for any mid-century modern or contemporary home.',
    category_id: "furniture_tables_coffee_tables",
    condition: "EXCELLENT",
    image_urls_original: [
      "https://images.unsplash.com/photo-1533090481720-856c6e3c1fdc?w=400&h=300&fit=crop",
    ],
    serial_number: null,
    model_number: null,
    brand: "Vintage",
    dimensions: '48" W x 24" D x 18" H',
    discount_schedule: "Turbo-30",
    zip_code: "77007",

    // Display fields
    seller_name: "VintageVault",
    location: "The Heights (Washington Corridor)",
    rating: 4.7,
    reviews: 15,
    timeLeft: "3d 22h",
  },
  {
    // Auto-generated by ConsignCrew
    item_id: "cc_004_2025_01_12_004",
    seller_id: "user_101",
    created_at: "2025-01-12T16:45:00Z",
    status: "LISTED",
    qr_code_url:
      "https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=cc_004_2025_01_12_004",
    image_urls_staged: [
      "https://images.unsplash.com/photo-1542291026-7eec264c27ff?w=400&h=300&fit=crop",
    ],
    gtin: "4567891234567",
    insights_query: "nike air jordan 1 retro high sneakers",
    price_range_low: 250,
    price_range_high: 350,
    list_price: 299.99,
    reserve_price: 200.0,
    fee_pct: 6.5,
    estimated_retail_price: 399.99,

    // Provided by seller
    title: "Nike Air Jordan 1 Retro High",
    description:
      "Brand new Nike Air Jordan 1 Retro High. Never worn, original box included. Limited edition colorway. This is the 2024 release in the classic Chicago colorway. Size 10.5 US. The shoes are completely unworn and come with all original packaging, including the special edition box and extra laces.",
    category_id: "sports_outdoors_footwear",
    condition: "NEW",
    image_urls_original: [
      "https://images.unsplash.com/photo-1542291026-7eec264c27ff?w=400&h=300&fit=crop",
    ],
    serial_number: "AJ1-2024-001",
    model_number: "555088-105",
    brand: "Nike",
    dimensions: "Size 10.5 US",
    discount_schedule: "Classic-60",
    zip_code: "77005",

    // Display fields
    seller_name: "SneakerHead",
    location: "West University Place",
    rating: 4.6,
    reviews: 23,
    timeLeft: "5h 30m",
  },
  {
    // Auto-generated by ConsignCrew
    item_id: "cc_005_2025_01_11_005",
    seller_id: "user_202",
    created_at: "2025-01-11T11:30:00Z",
    status: "LISTED",
    qr_code_url:
      "https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=cc_005_2025_01_11_005",
    image_urls_staged: [
      "https://images.unsplash.com/photo-1593359677879-a4bb92f829d1?w=400&h=300&fit=crop",
    ],
    gtin: "7891234567890",
    insights_query: "samsung 65 inch 4k smart tv electronics",
    price_range_low: 500,
    price_range_high: 700,
    list_price: 599.99,
    reserve_price: 450.0,
    fee_pct: 8.0,
    estimated_retail_price: 899.99,

    // Provided by seller
    title: 'Samsung 65" 4K Smart TV',
    description:
      "Samsung 65-inch 4K Smart TV in like-new condition. Includes remote and wall mount. Perfect picture quality. This TV was purchased in 2023 and has been used sparingly. The picture quality is exceptional with vibrant colors and deep blacks. Includes the original Samsung remote, wall mount bracket, and all original documentation. No dead pixels or screen issues.",
    category_id: "electronics_tvs_video",
    condition: "EXCELLENT",
    image_urls_original: [
      "https://images.unsplash.com/photo-1593359677879-a4bb92f829d1?w=400&h=300&fit=crop",
    ],
    serial_number: "SN65Q80TAFXZA",
    model_number: "QN65Q80TAFXZA",
    brand: "Samsung",
    dimensions: '65" diagonal, 57.1" W x 32.6" D x 2.3" H',
    discount_schedule: "Turbo-30",
    zip_code: "77024",

    // Display fields
    seller_name: "ElectronicsPlus",
    location: "Memorial / Memorial Villages",
    rating: 4.8,
    reviews: 6,
    timeLeft: "1d 16h",
  },
  {
    // Auto-generated by ConsignCrew
    item_id: "cc_006_2025_01_10_006",
    seller_id: "user_303",
    created_at: "2025-01-10T13:45:00Z",
    status: "LISTED",
    qr_code_url:
      "https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=cc_006_2025_01_10_006",
    image_urls_staged: [
      "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&h=300&fit=crop",
    ],
    gtin: null,
    insights_query: "handcrafted ceramic vase set home decor",
    price_range_low: 80,
    price_range_high: 120,
    list_price: 89.99,
    reserve_price: 60.0,
    fee_pct: 8.5,
    estimated_retail_price: 149.99,

    // Provided by seller
    title: "Handcrafted Ceramic Vase Set",
    description:
      "Beautiful handcrafted ceramic vase set. Perfect for home decoration. Each piece is unique and hand-painted. This set includes 3 vases of varying sizes (small, medium, large) in complementary earth tones. Each vase is hand-thrown and hand-painted by local artisans. The glazes are food-safe and the pieces are dishwasher safe. Perfect as a gift or for home decoration.",
    category_id: "home_living_home_decor",
    condition: "NEW",
    image_urls_original: [
      "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&h=300&fit=crop",
    ],
    serial_number: null,
    model_number: null,
    brand: "ArtisanCraft",
    dimensions: 'Small: 6" H, Medium: 8" H, Large: 12" H',
    discount_schedule: "Turbo-30",
    zip_code: "77006",

    // Display fields
    seller_name: "ArtisanCraft",
    location: "Montrose / Museum District",
    rating: 4.9,
    reviews: 31,
    timeLeft: "4d 7h",
  },
];

// Mock data for questions and responses
const mockQuestions = [
  {
    id: "q1",
    item_id: "cc_001_2025_01_15_001",
    question: "Is this sofa pet-friendly?",
    answer:
      "The leather is treated and should be fine with pets, but we recommend using a cover for extra protection.",
    asked_by: "user_789",
    asked_at: "2025-01-16T09:15:00Z",
    answered_at: "2025-01-16T10:30:00Z",
    is_approved: true,
    is_public: true,
  },
  {
    id: "q2",
    item_id: "cc_001_2025_01_15_001",
    question: "Can you deliver to 77002?",
    answer: "Yes, we can deliver to 77002 for an additional fee of $25.",
    asked_by: "user_456",
    asked_at: "2025-01-16T14:20:00Z",
    answered_at: "2025-01-16T15:45:00Z",
    is_approved: true,
    is_public: true,
  },
  {
    id: "q3",
    item_id: "cc_001_2025_01_15_001",
    question: "What's the weight capacity?",
    answer:
      "The sofa has a weight capacity of 600 pounds distributed across all seats.",
    asked_by: "user_123",
    asked_at: "2025-01-17T11:30:00Z",
    answered_at: "2025-01-17T12:15:00Z",
    is_approved: true,
    is_public: false, // Pending approval
  },
  {
    id: "q4",
    item_id: "cc_002_2025_01_14_002",
    question: "Does it come with the original box?",
    answer:
      "Yes, the iPhone comes with the original box and all included accessories.",
    asked_by: "user_999",
    asked_at: "2025-01-15T16:45:00Z",
    answered_at: "2025-01-15T17:20:00Z",
    is_approved: true,
    is_public: true,
  },
  {
    id: "q5",
    item_id: "cc_002_2025_01_14_002",
    question: "What's the battery health?",
    answer:
      "The battery health is at 87% and the phone holds a charge well throughout the day.",
    asked_by: "user_777",
    asked_at: "2025-01-16T08:30:00Z",
    answered_at: "2025-01-16T09:00:00Z",
    is_approved: false, // Not approved yet
    is_public: false,
  },
];

export default function ListingsPage() {
  const router = useRouter();
  const [listings, setListings] = useState(mockListings);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("All");
  const [sortBy, setSortBy] = useState("relevance");
  const [showHidden, setShowHidden] = useState(false);
  const [showSaved, setShowSaved] = useState(false);
  const [savedListings, setSavedListings] = useState<Set<string>>(new Set());
  const [hiddenListings, setHiddenListings] = useState<Set<string>>(new Set());
  const [selectedListing, setSelectedListing] = useState<any>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [questions, setQuestions] = useState(mockQuestions);
  const [isAdmin, setIsAdmin] = useState(true); // Mock admin status - in real app this would come from auth
  const [isClient, setIsClient] = useState(false); // Track client-side rendering
  const [timeKey, setTimeKey] = useState(0); // Force re-renders for time calculations

  // Set client-side rendering flag after hydration
  useEffect(() => {
    setIsClient(true);
  }, []);

  // Fetch listings from API
  useEffect(() => {
    const fetchListings = async () => {
      try {
        const response = await fetch("/api/listings");
        if (!response.ok) {
          throw new Error("Failed to fetch listings");
        }
        const data = await response.json();
        if (data.success) {
          // Transform API data to match the expected format
          const transformedListings = data.listings.map((listing: any) => ({
            item_id: listing.itemId,
            seller_id: listing.userId,
            created_at: listing.createdAt,
            status: listing.status,
            qr_code_url: `https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${listing.itemId}`,
            image_urls_staged: listing.photos.hero
              ? [listing.photos.hero] // Use the actual image URL from database
              : [],
            title: listing.title,
            description: listing.description,
            category_id: `${listing.department}_${listing.category}_${listing.subCategory}`,
            condition: listing.condition,
            image_urls_original:
              listing.photos.gallery || [listing.photos.hero] || [],
            serial_number: listing.serialNumber,
            model_number: listing.modelNumber,
            brand: listing.brand,
            dimensions: listing.dimensions,
            discount_schedule: listing.discountSchedule?.type || "Classic-60",
            zip_code: listing.zipCode,
            list_price: listing.price,
            estimated_retail_price: listing.estimatedRetailPrice,
            seller_name: `${listing.user.firstName} ${listing.user.lastName}`,
            location: listing.neighborhood,
            rating: 4.5, // Default rating for now
            reviews: 0, // Default reviews for now
            timeLeft: "2d 14h", // Default time for now
          }));
          setListings(transformedListings);
        }
      } catch (error) {
        console.error("Error fetching listings:", error);
        // Keep using mock data as fallback
        setListings(mockListings);
      }
    };

    fetchListings();
  }, []);

  // Update time calculations every minute
  useEffect(() => {
    if (!isClient) return;

    const interval = setInterval(() => {
      setTimeKey((prev) => prev + 1);
    }, 60000); // Update every minute

    return () => clearInterval(interval);
  }, [isClient]);

  // Filter and sort listings
  const filteredListings = listings
    .filter((listing) => {
      const matchesSearch =
        listing.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        listing.category_id.toLowerCase().includes(searchTerm.toLowerCase()) ||
        listing.seller_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        listing.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
        listing.location.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesCategory =
        selectedCategory === "All" ||
        listing.category_id.includes(selectedCategory.toLowerCase());
      const isHidden = hiddenListings.has(listing.item_id);
      const isSaved = savedListings.has(listing.item_id);
      const shouldShowHidden = showHidden || !isHidden;
      const shouldShowSaved = !showSaved || isSaved;

      return (
        matchesSearch && matchesCategory && shouldShowHidden && shouldShowSaved
      );
    })
    .sort((a, b) => {
      switch (sortBy) {
        case "price-low":
          return a.list_price - b.list_price;
        case "price-high":
          return b.list_price - a.list_price;
        case "newest":
          return (
            new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
          );
        case "rating":
          return b.rating - a.rating;
        default:
          return 0;
      }
    });

  const toggleSaved = (id: string) => {
    setSavedListings((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(id)) {
        newSet.delete(id);
      } else {
        newSet.add(id);
      }
      return newSet;
    });
  };

  const toggleHidden = (id: string) => {
    setHiddenListings((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(id)) {
        newSet.delete(id);
      } else {
        newSet.add(id);
      }
      return newSet;
    });
  };

  const openModal = (listing: any) => {
    setSelectedListing(listing);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedListing(null);
  };

  const navigateToListingDetail = (listingId: string) => {
    router.push(`/list-item/${listingId}`);
  };

  const approveQuestion = (questionId: string) => {
    setQuestions((prevQuestions) =>
      prevQuestions.map((q) =>
        q.id === questionId ? { ...q, is_approved: true, is_public: true } : q
      )
    );
  };

  const categories = [
    "All",
    "Furniture",
    "Electronics",
    "Sports & Outdoors",
    "Home & Living",
    "Fashion",
  ];

  const getConditionColor = (condition: string) => {
    switch (condition) {
      case "NEW":
        return "bg-blue-100 text-blue-800";
      case "EXCELLENT":
        return "bg-green-100 text-green-800";
      case "GOOD":
        return "bg-yellow-100 text-yellow-800";
      case "FAIR":
        return "bg-orange-100 text-orange-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  // Calculate time until next price drop based on discount schedule
  const getTimeUntilNextDrop = (
    discountSchedule: string,
    createdAt: string
  ) => {
    // Return null during server-side rendering to prevent hydration mismatch
    if (!isClient) {
      return null;
    }

    const now = new Date();
    const created = new Date(createdAt);
    const elapsed = now.getTime() - created.getTime();

    let dropInterval: number;
    let totalDuration: number;

    switch (discountSchedule) {
      case "Turbo-30":
        dropInterval = 30 * 60 * 1000; // 30 minutes in milliseconds
        totalDuration = 7 * 24 * 60 * 60 * 1000; // 7 days in milliseconds
        break;
      case "Classic-60":
        dropInterval = 60 * 60 * 1000; // 60 minutes in milliseconds
        totalDuration = 14 * 24 * 60 * 60 * 1000; // 14 days in milliseconds
        break;
      default:
        return null;
    }

    // If listing has expired, return null
    if (elapsed >= totalDuration) {
      return null;
    }

    // Calculate time until next drop
    const timeSinceLastDrop = elapsed % dropInterval;
    const timeUntilNextDrop = dropInterval - timeSinceLastDrop;

    // Convert to hours and minutes
    const hours = Math.floor(timeUntilNextDrop / (60 * 60 * 1000));
    const minutes = Math.floor(
      (timeUntilNextDrop % (60 * 60 * 1000)) / (60 * 1000)
    );

    if (hours > 0) {
      return `${hours}h ${minutes}m`;
    } else {
      return `${minutes}m`;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 sticky top-0 z-10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex flex-col sm:flex-row gap-4 items-center justify-between">
            <h1 className="text-2xl font-bold text-gray-900">
              Active Listings
            </h1>

            {/* Search Bar */}
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <input
                type="text"
                placeholder="Search listings..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#D4AF3D] focus:border-transparent"
              />
            </div>

            {/* Filter Controls */}
            <div className="flex gap-2">
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#D4AF3D] focus:border-transparent"
              >
                {categories.map((category) => (
                  <option key={category} value={category}>
                    {category}
                  </option>
                ))}
              </select>

              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#D4AF3D] focus:border-transparent"
              >
                <option value="relevance">Relevance</option>
                <option value="price-low">Price: Low to High</option>
                <option value="price-high">Price: High to Low</option>
                <option value="newest">Newest First</option>
                <option value="rating">Highest Rated</option>
              </select>

              {/* Show Saved Toggle */}
              <Button
                variant={showSaved ? "default" : "outline"}
                size="sm"
                onClick={() => setShowSaved(!showSaved)}
                className="flex items-center gap-2"
              >
                <Bookmark className="h-4 w-4" />
                {showSaved ? "Show All" : "Saved Only"}
              </Button>

              {/* Show Hidden Toggle */}
              <Button
                variant={showHidden ? "default" : "outline"}
                size="sm"
                onClick={() => setShowHidden(!showHidden)}
                className="flex items-center gap-2"
              >
                <EyeOff className="h-4 w-4" />
                {showHidden ? "Hide Hidden" : "Show Hidden"}
              </Button>
            </div>
          </div>
        </div>
      </div>

      {/* Results Count */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <div className="flex items-center justify-between">
          <p className="text-gray-600">
            Showing {filteredListings.length} of {listings.length} listings
          </p>
          <div className="flex items-center gap-4 text-sm text-gray-600">
            <span className="flex items-center gap-1">
              <Bookmark className="h-4 w-4 text-[#D4AF3D]" />
              {savedListings.size} saved
            </span>
            <span className="flex items-center gap-1">
              <EyeOff className="h-4 w-4 text-gray-500" />
              {hiddenListings.size} hidden
            </span>
          </div>
        </div>
      </div>

      {/* Listings Grid */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-8">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {filteredListings.map((listing) => {
            const isSaved = savedListings.has(listing.item_id);
            const isHidden = hiddenListings.has(listing.item_id);

            return (
              <div
                key={listing.item_id}
                className={`bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200 overflow-hidden ${
                  isHidden ? "opacity-60" : ""
                }`}
              >
                {/* Image Container */}
                <div className="relative aspect-square overflow-hidden">
                  <img
                    src={listing.image_urls_staged[0]}
                    alt={listing.title}
                    className="w-full h-full object-cover hover:scale-105 transition-transform duration-200"
                  />

                  {/* Time Left Badge */}
                  <div className="absolute bottom-2 left-2 bg-black/70 text-white px-2 py-1 rounded text-xs flex items-center gap-1">
                    <Clock className="h-3 w-3" />
                    {listing.timeLeft}
                  </div>

                  {/* Newly Listed Badge - Show for items added in last 7 days */}
                  {isClient &&
                    (() => {
                      const createdDate = new Date(listing.created_at);
                      const now = new Date();
                      const daysDiff =
                        (now.getTime() - createdDate.getTime()) /
                        (1000 * 60 * 60 * 24);
                      return daysDiff <= 7 ? (
                        <div className="absolute top-2 left-2 bg-green-600 text-white px-2 py-1 rounded text-xs font-medium">
                          Newly Listed
                        </div>
                      ) : null;
                    })()}

                  {/* Price Drop Badge - Show for price drops in last 3 days */}
                  {isClient &&
                    (() => {
                      // Mock price drop data - in real app this would come from price history
                      // Use a deterministic approach based on listing ID to prevent hydration issues
                      const hasRecentPriceDrop =
                        listing.item_id.charCodeAt(listing.item_id.length - 1) %
                          3 ===
                        0; // 33% chance based on ID
                      return hasRecentPriceDrop ? (
                        <div className="absolute top-2 right-2 bg-red-600 text-white px-2 py-1 rounded text-xs font-medium">
                          Price Drop
                        </div>
                      ) : null;
                    })()}

                  {/* Next Price Drop Badge */}
                  {(() => {
                    const nextDrop = getTimeUntilNextDrop(
                      listing.discount_schedule,
                      listing.created_at
                    );
                    return (
                      nextDrop && (
                        <div
                          key={`${listing.item_id}-${timeKey}`}
                          className="absolute bottom-2 left-20 bg-red-600 text-white px-2 py-1 rounded text-xs flex items-center gap-1"
                        >
                          <TrendingDown className="h-3 w-3" />
                          {nextDrop}
                        </div>
                      )
                    );
                  })()}

                  {/* QR Code Badge */}
                  <div className="absolute bottom-2 right-2 bg-white/90 p-1 rounded">
                    <QrCode className="h-4 w-4 text-gray-600" />
                  </div>

                  {/* Hidden Badge */}
                  {isHidden && (
                    <div className="absolute top-2 left-12 bg-gray-600 text-white px-2 py-1 rounded text-xs font-bold">
                      HIDDEN
                    </div>
                  )}
                </div>

                {/* Content */}
                <div className="p-4">
                  {/* Title */}
                  <h3 className="font-semibold text-gray-900 text-sm line-clamp-2 mb-2 hover:text-[#D4AF3D] cursor-pointer">
                    {listing.title}
                  </h3>

                  {/* List Price */}
                  <div className="flex items-center gap-2 mb-2">
                    <span className="text-lg font-bold text-gray-900">
                      ${listing.list_price.toFixed(2)}
                    </span>
                    {listing.list_price <= listing.reserve_price && (
                      <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded font-medium">
                        Reserve Met
                      </span>
                    )}
                  </div>

                  {/* Estimated Retail Price - Only show if available */}
                  {listing.estimated_retail_price && (
                    <div className="flex items-center gap-2 mb-2">
                      <span className="text-sm text-gray-500 line-through">
                        ${listing.estimated_retail_price.toFixed(2)}
                      </span>
                      <div className="flex items-center gap-1 text-xs text-red-600">
                        <ArrowDown className="h-3 w-3" />
                        <span>
                          {Math.round(
                            ((listing.estimated_retail_price -
                              listing.list_price) /
                              listing.estimated_retail_price) *
                              100
                          )}
                          % Off Retail
                        </span>
                      </div>
                    </div>
                  )}

                  {/* Rating */}
                  <div className="flex items-center gap-1 mb-2">
                    <Star className="h-3 w-3 fill-yellow-400 text-yellow-400" />
                    <span className="text-xs text-gray-600">
                      {listing.rating}
                    </span>
                    <span className="text-xs text-gray-400">
                      ({listing.reviews})
                    </span>
                  </div>

                  {/* Condition & Location */}
                  <div className="flex items-center justify-between text-xs text-gray-500 mb-3">
                    <span
                      className={`px-2 py-1 rounded ${getConditionColor(listing.condition)}`}
                    >
                      {listing.condition}
                    </span>
                    <div className="flex items-center gap-1">
                      <MapPin className="h-3 w-3" />
                      {listing.location}
                    </div>
                  </div>

                  {/* Brand & Dimensions */}
                  {(listing.brand || listing.dimensions) && (
                    <div className="text-xs text-gray-400 mb-3">
                      {listing.brand && (
                        <div className="flex items-center gap-1">
                          <Tag className="h-3 w-3" />
                          Brand: {listing.brand}
                        </div>
                      )}
                      {listing.dimensions && (
                        <div className="flex items-center gap-1">
                          <Package className="h-3 w-3" />
                          {listing.dimensions}
                        </div>
                      )}
                    </div>
                  )}

                  {/* Action Buttons */}
                  <div className="flex gap-2">
                    <Button
                      variant="default"
                      className="flex-1 bg-[#D4AF3D] hover:bg-[#b8932f] text-white text-sm"
                      onClick={() => openModal(listing)}
                    >
                      View Details
                    </Button>

                    {/* Save Button */}
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => toggleSaved(listing.item_id)}
                      className={`px-3 transition-colors ${
                        isSaved
                          ? "bg-[#D4AF3D] text-white border-[#D4AF3D]"
                          : "hover:bg-[#D4AF3D] hover:text-white hover:border-[#D4AF3D]"
                      }`}
                    >
                      <Bookmark
                        className={`h-4 w-4 ${isSaved ? "fill-current" : ""}`}
                      />
                    </Button>

                    {/* Hide Button */}
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => toggleHidden(listing.item_id)}
                      className={`px-3 transition-colors ${
                        isHidden
                          ? "bg-gray-600 text-white border-gray-600"
                          : "hover:bg-gray-600 hover:text-white hover:border-gray-600"
                      }`}
                    >
                      <EyeOff
                        className={`h-4 w-4 ${isHidden ? "fill-current" : ""}`}
                      />
                    </Button>
                  </div>
                </div>
              </div>
            );
          })}
        </div>

        {/* No Results */}
        {filteredListings.length === 0 && (
          <div className="text-center py-12">
            <div className="text-gray-400 mb-4">
              <Search className="h-12 w-12 mx-auto" />
            </div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              No listings found
            </h3>
            <p className="text-gray-500">
              Try adjusting your search or filter criteria
            </p>
          </div>
        )}
      </div>

      {/* Listing Details Modal */}
      {isModalOpen && selectedListing && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            {/* Modal Header */}
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <h2 className="text-2xl font-bold text-gray-900">
                {selectedListing.title}
              </h2>
              <button
                onClick={closeModal}
                className="p-2 hover:bg-gray-100 rounded-full transition-colors"
              >
                <X className="h-6 w-6 text-gray-500" />
              </button>
            </div>

            {/* Modal Content */}
            <div className="p-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {/* Left Column - Image and Basic Info */}
                <div>
                  {/* Main Image */}
                  <div className="mb-6">
                    <img
                      src={selectedListing.image_urls_staged[0]}
                      alt={selectedListing.title}
                      className="w-full h-96 object-cover rounded-lg"
                    />
                  </div>

                  {/* Price Information */}
                  <div className="bg-gray-50 p-4 rounded-lg mb-6">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-3xl font-bold text-gray-900">
                        ${selectedListing.list_price.toFixed(2)}
                      </span>
                    </div>
                    {selectedListing.list_price <=
                      selectedListing.reserve_price && (
                      <div className="text-sm bg-green-100 text-green-800 px-3 py-1 rounded font-medium inline-block">
                        Reserve Met
                      </div>
                    )}
                    {/* Estimated Retail Price - Only show if available */}
                    {selectedListing.estimated_retail_price && (
                      <div className="mt-3 flex items-center gap-3">
                        <span className="text-lg text-gray-500 line-through">
                          ${selectedListing.estimated_retail_price.toFixed(2)}
                        </span>
                        <div className="flex items-center gap-2 text-sm text-red-600">
                          <ArrowDown className="h-4 w-4" />
                          <span className="font-medium">
                            {Math.round(
                              ((selectedListing.estimated_retail_price -
                                selectedListing.list_price) /
                                selectedListing.estimated_retail_price) *
                                100
                            )}
                            % Off Retail
                          </span>
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Action Buttons */}
                  <div className="flex gap-3 mb-6">
                    <Button
                      variant="default"
                      className="flex-1 bg-[#D4AF3D] hover:bg-[#b8932f] text-white"
                    >
                      Buy it Now
                    </Button>
                    <Button
                      variant="outline"
                      onClick={() => toggleSaved(selectedListing.item_id)}
                      className={`${
                        savedListings.has(selectedListing.item_id)
                          ? "bg-[#D4AF3D] text-white border-[#D4AF3D]"
                          : ""
                      }`}
                    >
                      <Bookmark
                        className={`h-4 w-4 mr-2 ${
                          savedListings.has(selectedListing.item_id)
                            ? "fill-current"
                            : ""
                        }`}
                      />
                      {savedListings.has(selectedListing.item_id)
                        ? "Saved"
                        : "Save"}
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      className="px-3"
                      title="Ask a Question"
                    >
                      <HelpCircle className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="outline"
                      onClick={() =>
                        navigateToListingDetail(selectedListing.item_id)
                      }
                      className="flex items-center gap-2 hover:bg-gray-100"
                      title="View Full Details"
                    >
                      <ExternalLink className="h-4 w-4" />
                      See More
                    </Button>
                  </div>
                </div>

                {/* Right Column - Details */}
                <div>
                  {/* Item Details */}
                  <div className="mb-6">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">
                      Item Details
                    </h3>
                    <div className="space-y-3">
                      <div className="flex items-center gap-3">
                        <Package className="h-5 w-5 text-gray-400" />
                        <div>
                          <span className="text-sm font-medium text-gray-700">
                            Condition:
                          </span>
                          <span
                            className={`ml-2 px-2 py-1 rounded text-xs ${getConditionColor(selectedListing.condition)}`}
                          >
                            {selectedListing.condition}
                          </span>
                        </div>
                      </div>
                      <div className="flex items-center gap-3">
                        <Calendar className="h-5 w-5 text-gray-400" />
                        <div>
                          <span className="text-sm font-medium text-gray-700">
                            Listed:
                          </span>
                          <span className="ml-2 text-sm text-gray-600">
                            {formatDate(selectedListing.created_at)}
                          </span>
                        </div>
                      </div>
                      <div className="flex items-center gap-3">
                        <Clock className="h-5 w-5 text-gray-400" />
                        <div>
                          <span className="text-sm font-medium text-gray-700">
                            Time Left:
                          </span>
                          <span className="ml-2 text-sm text-gray-600">
                            {selectedListing.timeLeft}
                          </span>
                        </div>
                      </div>
                      {(() => {
                        const nextDrop = getTimeUntilNextDrop(
                          selectedListing.discount_schedule,
                          selectedListing.created_at
                        );
                        return (
                          nextDrop && (
                            <div className="flex items-center gap-3">
                              <TrendingDown className="h-5 w-5 text-gray-400" />
                              <div>
                                <span className="text-sm font-medium text-gray-700">
                                  Next Price Drop:
                                </span>
                                <span className="ml-2 text-sm text-gray-600">
                                  {nextDrop}
                                </span>
                              </div>
                            </div>
                          )
                        );
                      })()}
                      {/* Brand & Dimensions */}
                      {(selectedListing.brand ||
                        selectedListing.dimensions) && (
                        <>
                          {selectedListing.brand && (
                            <div className="flex items-center gap-3">
                              <Tag className="h-5 w-5 text-gray-400" />
                              <div>
                                <span className="text-sm font-medium text-gray-700">
                                  Brand:
                                </span>
                                <span className="ml-2 text-sm text-gray-600">
                                  {selectedListing.brand}
                                </span>
                              </div>
                            </div>
                          )}
                          {selectedListing.dimensions && (
                            <div className="flex items-center gap-3">
                              <Package className="h-5 w-5 text-gray-400" />
                              <div>
                                <span className="text-sm font-medium text-gray-700">
                                  Dimensions:
                                </span>
                                <span className="ml-2 text-sm text-gray-600">
                                  {selectedListing.dimensions}
                                </span>
                              </div>
                            </div>
                          )}
                        </>
                      )}

                      {/* Serial/Model Numbers */}
                      {(selectedListing.serial_number ||
                        selectedListing.model_number) && (
                        <>
                          {selectedListing.serial_number && (
                            <div className="flex items-center gap-3">
                              <Tag className="h-5 w-5 text-gray-400" />
                              <div>
                                <span className="text-sm font-medium text-gray-700">
                                  Serial Number:
                                </span>
                                <span className="ml-2 text-sm text-gray-600">
                                  {selectedListing.serial_number}
                                </span>
                              </div>
                            </div>
                          )}
                          {selectedListing.model_number && (
                            <div className="flex items-center gap-3">
                              <Tag className="h-5 w-5 text-gray-400" />
                              <div>
                                <span className="text-sm font-medium text-gray-700">
                                  Model Number:
                                </span>
                                <span className="ml-2 text-sm text-gray-600">
                                  {selectedListing.model_number}
                                </span>
                              </div>
                            </div>
                          )}
                        </>
                      )}
                      {selectedListing.gtin && (
                        <div className="flex items-center gap-3">
                          <Tag className="h-5 w-5 text-gray-400" />
                          <div>
                            <span className="text-sm font-medium text-gray-700">
                              GTIN:
                            </span>
                            <span className="ml-2 text-sm text-gray-600">
                              {selectedListing.gtin}
                            </span>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Seller Information */}
                  <div className="mb-6">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">
                      Seller Information
                    </h3>
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <div className="flex items-center gap-3 mb-3">
                        <User className="h-5 w-5 text-gray-400" />
                        <div>
                          <span className="text-sm font-medium text-gray-700">
                            Seller:
                          </span>
                          <span className="ml-2 text-sm text-[#D4AF3D] font-medium">
                            {selectedListing.seller_name}
                          </span>
                        </div>
                      </div>
                      <div className="flex items-center gap-3 mb-3">
                        <MapPin className="h-5 w-5 text-gray-400" />
                        <div>
                          <span className="text-sm font-medium text-gray-700">
                            Location:
                          </span>
                          <span className="ml-2 text-sm text-gray-600">
                            {selectedListing.location}
                          </span>
                        </div>
                      </div>
                      <div className="flex items-center gap-3">
                        <Star className="h-5 w-5 text-yellow-400" />
                        <div>
                          <span className="text-sm font-medium text-gray-700">
                            Rating:
                          </span>
                          <span className="ml-2 text-sm text-gray-600">
                            {selectedListing.rating} ({selectedListing.reviews}{" "}
                            reviews)
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Description */}
                  <div className="mb-6">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">
                      Description
                    </h3>
                    <p className="text-gray-700 leading-relaxed">
                      {selectedListing.description}
                    </p>
                  </div>

                  {/* Questions Section */}
                  <div className="mb-6">
                    <QuestionsDisplay
                      listingId={selectedListing.item_id}
                      listingTitle={selectedListing.title}
                      userId={selectedListing.seller_id}
                      isAdmin={isAdmin}
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
