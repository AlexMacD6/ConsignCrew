const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Mock data from the listings page
const mockListings = [
  {
    // Auto-generated by TreasureHub
    item_id: "cc_001_2025_01_15_001",
    seller_id: "user_123",
    created_at: "2025-01-15T10:30:00Z",
    status: "LISTED",
    qr_code_url:
      "https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=cc_001_2025_01_15_001",
    image_urls_staged: [
      "https://images.unsplash.com/photo-1555041469-a586c61ea9bc?w=400&h=300&fit=crop",
    ],
    gtin: "1234567890123",
    insights_query: "modern leather sofa furniture seating living room",
    price_range_low: 750,
    price_range_high: 1100,
    list_price: 899.99,
    reserve_price: 650.0,
    fee_pct: 8.5,
    estimated_retail_price: 1299.99,

    // Provided by seller
    title: "Modern Leather Sofa",
    description:
      "Premium leather sofa in excellent condition. Perfect for living room or office. Features high-quality construction and comfortable seating. This sofa has been well-maintained and shows minimal signs of wear. The leather is supple and the cushions provide excellent support. Includes matching throw pillows.",
    category_id: "furniture_seating_sofas",
    condition: "EXCELLENT",
    image_urls_original: [
      "https://images.unsplash.com/photo-1555041469-a586c61ea9bc?w=400&h=300&fit=crop",
    ],
    serial_number: "SOFA-2024-001",
    model_number: "MLS-3S-2024",
    brand: "Ashley Furniture",
    dimensions: '84" W x 35" D x 38" H',
    discount_schedule: "Turbo-30",
    zip_code: "77019",

    // Display fields
    seller_name: "FurniturePro",
    location: "River Oaks / Upper Kirby",
    rating: 4.8,
    reviews: 12,
    timeLeft: "2d 14h",
  },
  {
    // Auto-generated by TreasureHub
    item_id: "cc_002_2025_01_14_002",
    seller_id: "user_456",
    created_at: "2025-01-14T14:20:00Z",
    status: "LISTED",
    qr_code_url:
      "https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=cc_002_2025_01_14_002",
    image_urls_staged: [
      "https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?w=400&h=300&fit=crop",
    ],
    gtin: "9876543210987",
    insights_query: "iphone 13 pro smartphone mobile electronics",
    price_range_low: 650,
    price_range_high: 850,
    list_price: 749.99,
    reserve_price: 550.0,
    fee_pct: 7.5,
    estimated_retail_price: 999.99,

    // Provided by seller
    title: "iPhone 13 Pro - 256GB",
    description:
      "iPhone 13 Pro in good condition. Includes original box and charger. Minor scratches on screen protector. The phone has been used for about 18 months and is in excellent working condition. Battery health is at 87% and all features work perfectly. No water damage or major repairs.",
    category_id: "electronics_mobile_phones",
    condition: "GOOD",
    image_urls_original: [
      "https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?w=400&h=300&fit=crop",
    ],
    serial_number: "DNQH2K3L4M5N",
    model_number: "A2483",
    brand: "Apple",
    dimensions: '5.78" H x 2.82" W x 0.30" D',
    discount_schedule: "Classic-60",
    zip_code: "77056",

    // Display fields
    seller_name: "TechTrader",
    location: "Galleria / Tanglewood",
    rating: 4.9,
    reviews: 8,
    timeLeft: "1d 8h",
  },
  {
    // Auto-generated by TreasureHub
    item_id: "cc_003_2025_01_13_003",
    seller_id: "user_789",
    created_at: "2025-01-13T09:15:00Z",
    status: "LISTED",
    qr_code_url:
      "https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=cc_003_2025_01_13_003",
    image_urls_staged: [
      "https://images.unsplash.com/photo-1533090481720-856c6e3c1fdc?w=400&h=300&fit=crop",
    ],
    gtin: null,
    insights_query: "vintage mid-century coffee table furniture",
    price_range_low: 400,
    price_range_high: 600,
    list_price: 450.0,
    reserve_price: 350.0,
    fee_pct: 9.0,
    estimated_retail_price: null,

    // Provided by seller
    title: "Vintage Mid-Century Coffee Table",
    description:
      'Authentic mid-century modern coffee table. Solid wood construction with beautiful patina. Perfect condition. This is a genuine piece from the 1960s, not a reproduction. The wood has developed a beautiful natural patina over the years. Dimensions are 48" x 24" x 18" high. Perfect for any mid-century modern or contemporary home.',
    category_id: "furniture_tables_coffee_tables",
    condition: "EXCELLENT",
    image_urls_original: [
      "https://images.unsplash.com/photo-1533090481720-856c6e3c1fdc?w=400&h=300&fit=crop",
    ],
    serial_number: null,
    model_number: null,
    brand: "Vintage",
    dimensions: '48" W x 24" D x 18" H',
    discount_schedule: "Turbo-30",
    zip_code: "77007",

    // Display fields
    seller_name: "VintageVault",
    location: "The Heights (Washington Corridor)",
    rating: 4.7,
    reviews: 15,
    timeLeft: "3d 22h",
  },
  {
    // Auto-generated by TreasureHub
    item_id: "cc_004_2025_01_12_004",
    seller_id: "user_101",
    created_at: "2025-01-12T16:45:00Z",
    status: "LISTED",
    qr_code_url:
      "https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=cc_004_2025_01_12_004",
    image_urls_staged: [
      "https://images.unsplash.com/photo-1542291026-7eec264c27ff?w=400&h=300&fit=crop",
    ],
    gtin: "4567891234567",
    insights_query: "nike air jordan 1 retro high sneakers",
    price_range_low: 250,
    price_range_high: 350,
    list_price: 299.99,
    reserve_price: 200.0,
    fee_pct: 6.5,
    estimated_retail_price: 399.99,

    // Provided by seller
    title: "Nike Air Jordan 1 Retro High",
    description:
      "Brand new Nike Air Jordan 1 Retro High. Never worn, original box included. Limited edition colorway. This is the 2024 release in the classic Chicago colorway. Size 10.5 US. The shoes are completely unworn and come with all original packaging, including the special edition box and extra laces.",
    category_id: "sports_outdoors_footwear",
    condition: "NEW",
    image_urls_original: [
      "https://images.unsplash.com/photo-1542291026-7eec264c27ff?w=400&h=300&fit=crop",
    ],
    serial_number: "AJ1-2024-001",
    model_number: "555088-105",
    brand: "Nike",
    dimensions: "Size 10.5 US",
    discount_schedule: "Classic-60",
    zip_code: "77005",

    // Display fields
    seller_name: "SneakerHead",
    location: "West University Place",
    rating: 4.6,
    reviews: 23,
    timeLeft: "5h 30m",
  },
  {
    // Auto-generated by TreasureHub
    item_id: "cc_005_2025_01_11_005",
    seller_id: "user_202",
    created_at: "2025-01-11T11:30:00Z",
    status: "LISTED",
    qr_code_url:
      "https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=cc_005_2025_01_11_005",
    image_urls_staged: [
      "https://images.unsplash.com/photo-1593359677879-a4bb92f829d1?w=400&h=300&fit=crop",
    ],
    gtin: "7891234567890",
    insights_query: "samsung 65 inch 4k smart tv electronics",
    price_range_low: 500,
    price_range_high: 700,
    list_price: 599.99,
    reserve_price: 450.0,
    fee_pct: 8.0,
    estimated_retail_price: 899.99,

    // Provided by seller
    title: 'Samsung 65" 4K Smart TV',
    description:
      "Samsung 65-inch 4K Smart TV in like-new condition. Includes remote and wall mount. Perfect picture quality. This TV was purchased in 2023 and has been used sparingly. The picture quality is exceptional with vibrant colors and deep blacks. Includes the original Samsung remote, wall mount bracket, and all original documentation. No dead pixels or screen issues.",
    category_id: "electronics_tvs_video",
    condition: "EXCELLENT",
    image_urls_original: [
      "https://images.unsplash.com/photo-1593359677879-a4bb92f829d1?w=400&h=300&fit=crop",
    ],
    serial_number: "SN65Q80TAFXZA",
    model_number: "QN65Q80TAFXZA",
    brand: "Samsung",
    dimensions: '65" diagonal, 57.1" W x 32.6" D x 2.3" H',
    discount_schedule: "Turbo-30",
    zip_code: "77024",

    // Display fields
    seller_name: "ElectronicsPlus",
    location: "Memorial / Memorial Villages",
    rating: 4.8,
    reviews: 6,
    timeLeft: "1d 16h",
  },
  {
    // Auto-generated by TreasureHub
    item_id: "cc_006_2025_01_10_006",
    seller_id: "user_303",
    created_at: "2025-01-10T13:45:00Z",
    status: "LISTED",
    qr_code_url:
      "https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=cc_006_2025_01_10_006",
    image_urls_staged: [
      "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&h=300&fit=crop",
    ],
    gtin: null,
    insights_query: "handcrafted ceramic vase set home decor",
    price_range_low: 80,
    price_range_high: 120,
    list_price: 89.99,
    reserve_price: 60.0,
    fee_pct: 8.5,
    estimated_retail_price: 149.99,

    // Provided by seller
    title: "Handcrafted Ceramic Vase Set",
    description:
      "Beautiful handcrafted ceramic vase set. Perfect for home decoration. Each piece is unique and hand-painted. This set includes 3 vases of varying sizes (small, medium, large) in complementary earth tones. Each vase is hand-thrown and hand-painted by local artisans. The glazes are food-safe and the pieces are dishwasher safe. Perfect as a gift or for home decoration.",
    category_id: "home_living_home_decor",
    condition: "NEW",
    image_urls_original: [
      "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&h=300&fit=crop",
    ],
    serial_number: null,
    model_number: null,
    brand: "ArtisanCraft",
    dimensions: 'Small: 6" H, Medium: 8" H, Large: 12" H',
    discount_schedule: "Turbo-30",
    zip_code: "77006",

    // Display fields
    seller_name: "ArtisanCraft",
    location: "Montrose / Museum District",
    rating: 4.9,
    reviews: 31,
    timeLeft: "4d 7h",
  },
];

/**
 * Parse category_id to extract department, category, and subCategory
 */
function parseCategory(categoryId) {
  const parts = categoryId.split('_');
  if (parts.length >= 3) {
    return {
      department: parts[0],
      category: parts[1],
      subCategory: parts[2]
    };
  } else if (parts.length === 2) {
    return {
      department: parts[0],
      category: parts[1],
      subCategory: 'general'
    };
  } else {
    return {
      department: 'general',
      category: 'general',
      subCategory: 'general'
    };
  }
}

/**
 * Create or find users for the listings
 */
async function getOrCreateUsers() {
  const users = [];
  
  // Try to find existing users first
  const existingUsers = await prisma.user.findMany({
    take: 6,
    orderBy: { createdAt: 'asc' }
  });

  if (existingUsers.length >= 6) {
    return existingUsers.slice(0, 6);
  }

  // Create additional users if needed
  const userNames = [
    { firstName: "Furniture", lastName: "Pro", email: "furniturepro@example.com" },
    { firstName: "Tech", lastName: "Trader", email: "techtrader@example.com" },
    { firstName: "Vintage", lastName: "Vault", email: "vintagevault@example.com" },
    { firstName: "Sneaker", lastName: "Head", email: "sneakerhead@example.com" },
    { firstName: "Electronics", lastName: "Plus", email: "electronicsplus@example.com" },
    { firstName: "Artisan", lastName: "Craft", email: "artisancraft@example.com" }
  ];

  for (let i = 0; i < 6; i++) {
    let user;
    if (i < existingUsers.length) {
      user = existingUsers[i];
    } else {
      const userData = userNames[i];
      user = await prisma.user.create({
        data: {
          ...userData,
          mobilePhone: `+1-555-${String(i + 100).padStart(3, '0')}-${String(i + 1000).padStart(4, '0')}`,
          emailVerified: true
        }
      });
      console.log(`Created user with ID: ${user.id}`);
    }
    users.push(user);
  }

  return users;
}

/**
 * Populate the database with mock listings
 */
async function populateListings() {
  try {
    console.log('Starting to populate listings...');

    // Get or create users
    const users = await getOrCreateUsers();
    console.log(`Using ${users.length} users for listings`);

    // Clear existing listings (optional - comment out if you want to keep existing ones)
    const existingCount = await prisma.listing.count();
    if (existingCount > 0) {
      console.log(`Found ${existingCount} existing listings. Clearing them...`);
      await prisma.listing.deleteMany({});
      console.log('Cleared existing listings');
    }

    // Create listings
    const createdListings = [];
    
    for (let i = 0; i < mockListings.length; i++) {
      const mockListing = mockListings[i];
      const user = users[i % users.length]; // Cycle through users
      
      const category = parseCategory(mockListing.category_id);
      
      const listingData = {
        userId: user.id,
        itemId: mockListing.item_id,
        photos: {
          hero: mockListing.image_urls_staged[0],
          gallery: mockListing.image_urls_original
        },
        department: category.department,
        category: category.category,
        subCategory: category.subCategory,
        title: mockListing.title,
        condition: mockListing.condition,
        price: mockListing.list_price,
        description: mockListing.description,
        zipCode: mockListing.zip_code,
        neighborhood: mockListing.location,
        brand: mockListing.brand || null,
        dimensions: mockListing.dimensions || null,
        serialNumber: mockListing.serial_number || null,
        modelNumber: mockListing.model_number || null,
        estimatedRetailPrice: mockListing.estimated_retail_price || null,
        discountSchedule: {
          type: mockListing.discount_schedule,
          feePercentage: mockListing.fee_pct,
          reservePrice: mockListing.reserve_price
        },
        status: "active",
        createdAt: new Date(mockListing.created_at),
        updatedAt: new Date()
      };

      const listing = await prisma.listing.create({
        data: listingData
      });

      createdListings.push(listing);
      console.log(`Created listing: ${listing.title} (${listing.itemId})`);
    }

    console.log(`\n✅ Successfully created ${createdListings.length} listings!`);
    console.log('\nCreated listings:');
    createdListings.forEach((listing, index) => {
      console.log(`${index + 1}. ${listing.title} - $${listing.price} (${listing.itemId})`);
    });

  } catch (error) {
    console.error('Error populating listings:', error);
    throw error;
  }
}

/**
 * Main function
 */
async function main() {
  try {
    await populateListings();
  } catch (error) {
    console.error('Failed to populate listings:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Run the script
if (require.main === module) {
  main();
}

module.exports = { populateListings, getOrCreateUsers }; 