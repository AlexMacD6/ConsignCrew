generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(cuid())
  firstName    String
  lastName     String
  email        String  @unique
  passwordHash String? // Optional for OAuth users who don't set a password

  // OAuth Provider Information
  oauthProvider     String? // 'google', 'facebook', 'tiktok', or null for email/password
  oauthProviderId   String? // The unique ID from the OAuth provider
  oauthAccessToken  String? // Encrypted access token from OAuth provider
  oauthRefreshToken String? // Encrypted refresh token from OAuth provider
  oauthExpiresAt    DateTime? // When the OAuth token expires

  // Contact & Notifications
  mobilePhone      String?
  preferredContact String // 'email' or 'sms'

  // Shipping & Pickup Details
  shippingAddress String // JSON or formatted string (street, city, state, zip, country)
  alternatePickup String? // Optional alternate location

  // Payout Information
  payoutMethod  String // e.g. 'bank', 'paypal', 'venmo'
  payoutAccount String // Routing/account or PayPal email (encrypted in app)

  // Verification & Trust
  profilePhotoUrl String? // Optional profile photo (can come from OAuth)
  governmentIdUrl String? // Optional, encrypted storage

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User role for admin support
  role String @default("USER") // Possible values: USER, ADMIN

  // Relations for BetterAuth plugins
  members         Member[] // User's memberships in organizations
  invitationsSent Invitation[] @relation("InvitationsSent") // Invitations sent by this user
  teamMemberships TeamMember[] // User's team memberships
  sessions        Session[] // User's sessions

  // Index for OAuth provider lookups
  @@index([oauthProvider, oauthProviderId])
  @@index([email])
}

/// --- BetterAuth Organization Plugin Models ---

model Organization {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  logo        String?
  metadata    String?
  createdAt   DateTime     @default(now())
  members     Member[]
  teams       Team[]
  invitations Invitation[] // Invitations for this organization
  sessions    Session[] // Sessions with this org as active
}

model Member {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String // e.g. MEMBER, ADMIN, OWNER
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Invitation {
  id             String       @id @default(cuid())
  email          String
  inviterId      String
  organizationId String
  role           String
  status         String
  expiresAt      DateTime
  createdAt      DateTime     @default(now())
  inviter        User         @relation("InvitationsSent", fields: [inviterId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Team {
  id             String       @id @default(cuid())
  name           String
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  teamMembers    TeamMember[]
  sessions       Session[] // Sessions with this team as active
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Session {
  id                   String        @id @default(cuid())
  userId               String
  activeOrganizationId String?
  activeTeamId         String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  user                 User          @relation(fields: [userId], references: [id])
  organization         Organization? @relation(fields: [activeOrganizationId], references: [id])
  team                 Team?         @relation(fields: [activeTeamId], references: [id])
}
