generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id            String   @id @default(cuid())
  name          String // Primary name field for all users
  mobilePhone   String?
  email         String   @unique
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations for BetterAuth plugins
  members         Member[]
  invitationsSent Invitation[] @relation("InvitationsSent")
  teamMemberships TeamMember[]
  sessions        session[]
  accounts        account[]
  questions       Question[]   @relation("QuestionCreatedBy")
  answers         Question[]   @relation("QuestionAnsweredBy")
  approvals       Question[]   @relation("QuestionApprovedBy")
  listings        Listing[]

  @@index([email])
}

/// --- BetterAuth Organization Plugin Models ---

model Organization {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  logo        String?
  metadata    String?
  createdAt   DateTime     @default(now())
  members     Member[]
  teams       Team[]
  invitations Invitation[] // Invitations for this organization
  sessions    session[] // Sessions with this org as active
}

model Member {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String // e.g. MEMBER, ADMIN, OWNER
  createdAt      DateTime     @default(now())
  user           user         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Invitation {
  id             String       @id @default(cuid())
  email          String
  inviterId      String
  organizationId String
  role           String
  status         String
  expiresAt      DateTime
  createdAt      DateTime     @default(now())
  inviter        user         @relation("InvitationsSent", fields: [inviterId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Team {
  id             String       @id @default(cuid())
  name           String
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  teamMembers    TeamMember[]
  sessions       session[] // Sessions with this team as active
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id])
  user      user     @relation(fields: [userId], references: [id])
}

model session {
  id                   String        @id @default(cuid())
  userId               String
  token                String        @unique
  expiresAt            DateTime
  ipAddress            String?
  userAgent            String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  activeOrganizationId String?
  activeTeamId         String?
  user                 user          @relation(fields: [userId], references: [id])
  organization         Organization? @relation(fields: [activeOrganizationId], references: [id])
  team                 Team?         @relation(fields: [activeTeamId], references: [id])

  @@map("session")
}

// BetterAuth required models
model account {
  id                   String    @id @default(cuid())
  userId               String
  providerId           String    @map("provider")
  accountId            String    @map("providerAccountId")
  password             String? // For credentials (email/password) auth only
  refreshToken         String?   @map("refresh_token")
  accessToken          String?   @map("access_token")
  accessTokenExpiresAt DateTime? @map("expires_at")
  idToken              String?   @map("id_token")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model verificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationToken")
}

model ZipCode {
  id   String @id @default(cuid())
  code String
  area String
  type String // 'seller' or 'buyer'
}

model AiResponse {
  id                Int      @id @default(autoincrement())
  category          String
  triggerPhrases    String[] @map("trigger_phrases")
  response          String
  tags              String[]
  autoResponse      Boolean  @default(true) @map("auto_response")
  escalateIfUnclear Boolean  @default(false) @map("escalate_if_unclear")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("ai_responses")
}

model Question {
  id             String   @id @default(cuid())
  listingId      String?
  question       String
  answer         String?
  createdBy      String
  answeredBy     String?
  approvedBy     String?
  isPublic       Boolean  @default(false)
  isApproved     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdByUser  user     @relation("QuestionCreatedBy", fields: [createdBy], references: [id])
  answeredByUser user?    @relation("QuestionAnsweredBy", fields: [answeredBy], references: [id])
  approvedByUser user?    @relation("QuestionApprovedBy", fields: [approvedBy], references: [id])
}

model Listing {
  id                   String   @id @default(cuid())
  userId               String
  itemId               String   @unique
  photos               Json // Store photo keys as JSON
  department           String
  category             String
  subCategory          String
  title                String
  condition            String
  price                Float
  description          String
  zipCode              String
  neighborhood         String
  brand                String?
  dimensions           String?
  serialNumber         String?
  modelNumber          String?
  estimatedRetailPrice Float?
  discountSchedule     Json? // Store discount schedule as JSON
  status               String   @default("active") // active, sold, expired, etc.
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user         user           @relation(fields: [userId], references: [id])
  priceHistory PriceHistory[]

  @@index([userId])
  @@index([status])
  @@index([department])
  @@index([zipCode])
}

model PriceHistory {
  id        String   @id @default(cuid())
  listingId String
  price     Float
  createdAt DateTime @default(now())

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId])
  @@index([createdAt])
  @@map("price_history")
}

model EarlyAccessSignup {
  id           String   @id @default(cuid())
  email        String   @unique
  signupNumber Int      @unique // Sequential number for tracking top 200
  source       String   @default("website") // website, modal, etc.
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([email])
  @@index([signupNumber])
  @@map("early_access_signups")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  ipAddress String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([createdAt])
}

model TreasureRedemption {
  id                String   @id @default(cuid())
  code              String   @unique
  firstName         String
  lastName          String
  email             String
  phone             String?
  venmoUsername     String?
  cashAppUsername   String?
  zelleEmail        String?
  paymentMethod     String // "venmo", "cashapp", "zelle"
  selfieImageUrl    String?
  socialMediaPost   String? // Instagram post URL
  socialMediaBonus  Boolean  @default(false)
  paymentStatus     String   @default("pending") // "pending", "paid", "failed"
  treasureHubCredit Boolean  @default(false)
  earlyAccessSent   Boolean  @default(false)
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  expiresAt         DateTime // 30 days from creation

  @@index([code])
  @@index([email])
  @@index([paymentStatus])
}

model TreasureCode {
  id          String   @id @default(cuid())
  code        String   @unique
  isActive    Boolean  @default(true)
  maxUses     Int      @default(1)
  currentUses Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([code])
  @@index([isActive])
}
