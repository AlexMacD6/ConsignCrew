generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id              String       @id @default(cuid())
  email           String       @unique
  mobilePhone     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  emailVerified   Boolean      @default(false)
  name            String
  addressLine1    String?
  addressLine2    String?
  city            String?
  neighborhood    String?
  state           String?
  zipCode         String?
  invitationsSent Invitation[] @relation("InvitationsSent")
  listings        Listing[]
  members         Member[]
  answers         Question[]   @relation("QuestionAnsweredBy")
  approvals       Question[]   @relation("QuestionApprovedBy")
  questions       Question[]   @relation("QuestionCreatedBy")
  teamMemberships TeamMember[]
  accounts        account[]
  sessions        session[]

  @@index([email])
  @@index([zipCode])
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  logo        String?
  metadata    String?
  createdAt   DateTime     @default(now())
  invitations Invitation[]
  members     Member[]
  teams       Team[]
  sessions    session[]
}

model Member {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           user         @relation(fields: [userId], references: [id])
}

model Invitation {
  id             String       @id @default(cuid())
  email          String
  inviterId      String
  organizationId String
  role           String
  status         String
  expiresAt      DateTime
  createdAt      DateTime     @default(now())
  inviter        user         @relation("InvitationsSent", fields: [inviterId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Team {
  id             String       @id @default(cuid())
  name           String
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  teamMembers    TeamMember[]
  sessions       session[]
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id])
  user      user     @relation(fields: [userId], references: [id])
}

model session {
  id                   String        @id @default(cuid())
  userId               String
  activeOrganizationId String?
  activeTeamId         String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  expiresAt            DateTime
  token                String        @unique
  ipAddress            String?
  userAgent            String?
  organization         Organization? @relation(fields: [activeOrganizationId], references: [id])
  team                 Team?         @relation(fields: [activeTeamId], references: [id])
  user                 user          @relation(fields: [userId], references: [id])

  @@map("session")
}

model account {
  id                   String    @id @default(cuid())
  userId               String
  providerId           String    @map("provider")
  accountId            String    @map("providerAccountId")
  refreshToken         String?   @map("refresh_token")
  accessToken          String?   @map("access_token")
  idToken              String?   @map("id_token")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  accessTokenExpiresAt DateTime? @map("expires_at")
  password             String?
  user                 user      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model verificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationToken")
}

model ZipCode {
  id   String @id @default(cuid())
  code String
  area String
  type String
}

model AiResponse {
  id                Int      @id @default(autoincrement())
  category          String
  triggerPhrases    String[] @map("trigger_phrases")
  response          String
  tags              String[]
  autoResponse      Boolean  @default(true) @map("auto_response")
  escalateIfUnclear Boolean  @default(false) @map("escalate_if_unclear")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("ai_responses")
}

model Question {
  id             String   @id @default(cuid())
  question       String
  answer         String?
  createdAt      DateTime @default(now())
  answeredBy     String?
  approvedBy     String?
  createdBy      String
  updatedAt      DateTime @updatedAt
  isApproved     Boolean  @default(false)
  isPublic       Boolean  @default(false)
  listingId      String?
  answeredByUser user?    @relation("QuestionAnsweredBy", fields: [answeredBy], references: [id])
  approvedByUser user?    @relation("QuestionApprovedBy", fields: [approvedBy], references: [id])
  createdByUser  user     @relation("QuestionCreatedBy", fields: [createdBy], references: [id])
}

model Listing {
  id                   String         @id @default(cuid())
  userId               String
  itemId               String         @unique
  photos               Json
  videoUrl             String?
  department           String
  category             String
  subCategory          String
  title                String
  condition            String
  price                Float
  description          String
  zipCode              String
  neighborhood         String
  brand                String?
  dimensions           String?
  serialNumber         String?
  modelNumber          String?
  estimatedRetailPrice Float?
  discountSchedule     Json?
  status               String         @default("active")
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  views                Int            @default(0)
  user                 user           @relation(fields: [userId], references: [id])
  priceHistory         PriceHistory[]

  @@index([userId])
  @@index([status])
  @@index([department])
  @@index([zipCode])
}

model PriceHistory {
  id        String   @id @default(cuid())
  listingId String
  price     Float
  createdAt DateTime @default(now())
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId])
  @@index([createdAt])
  @@map("price_history")
}

model EarlyAccessSignup {
  id           String   @id @default(cuid())
  email        String   @unique
  signupNumber Int      @unique
  source       String   @default("website")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([email])
  @@index([signupNumber])
  @@map("early_access_signups")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  ipAddress String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([createdAt])
}

model TreasureRedemption {
  id                String   @id @default(cuid())
  code              String   @unique
  firstName         String
  lastName          String
  email             String
  phone             String?
  venmoUsername     String?
  cashAppUsername   String?
  zelleEmail        String?
  paymentMethod     String
  selfieImageUrl    String?
  socialMediaPost   String?
  socialMediaBonus  Boolean  @default(false)
  paymentStatus     String   @default("pending")
  treasureHubCredit Boolean  @default(false)
  earlyAccessSent   Boolean  @default(false)
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  expiresAt         DateTime

  @@index([code])
  @@index([email])
  @@index([paymentStatus])
}

model TreasureCode {
  id          String   @id @default(cuid())
  code        String   @unique
  isActive    Boolean  @default(true)
  maxUses     Int      @default(1)
  currentUses Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([code])
  @@index([isActive])
}
