generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id            String   @id @default(cuid())
  firstName     String
  lastName      String
  mobilePhone   String?
  email         String   @unique
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations for BetterAuth plugins
  members         Member[]
  invitationsSent Invitation[] @relation("InvitationsSent")
  teamMemberships TeamMember[]
  sessions        session[]
  accounts        account[]

  @@index([email])
}

/// --- BetterAuth Organization Plugin Models ---

model Organization {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  logo        String?
  metadata    String?
  createdAt   DateTime     @default(now())
  members     Member[]
  teams       Team[]
  invitations Invitation[] // Invitations for this organization
  sessions    session[] // Sessions with this org as active
}

model Member {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String // e.g. MEMBER, ADMIN, OWNER
  createdAt      DateTime     @default(now())
  user           user         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Invitation {
  id             String       @id @default(cuid())
  email          String
  inviterId      String
  organizationId String
  role           String
  status         String
  expiresAt      DateTime
  createdAt      DateTime     @default(now())
  inviter        user         @relation("InvitationsSent", fields: [inviterId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Team {
  id             String       @id @default(cuid())
  name           String
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  teamMembers    TeamMember[]
  sessions       session[] // Sessions with this team as active
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id])
  user      user     @relation(fields: [userId], references: [id])
}

model session {
  id                   String        @id @default(cuid())
  userId               String
  token                String        @unique
  expiresAt            DateTime
  ipAddress            String?
  userAgent            String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  activeOrganizationId String?
  activeTeamId         String?
  user                 user          @relation(fields: [userId], references: [id])
  organization         Organization? @relation(fields: [activeOrganizationId], references: [id])
  team                 Team?         @relation(fields: [activeTeamId], references: [id])

  @@map("session")
}

// BetterAuth required models
model account {
  id                   String    @id @default(cuid())
  userId               String
  providerId           String    @map("provider")
  accountId            String    @map("providerAccountId")
  password             String? // For credentials (email/password) auth only
  refreshToken         String?   @map("refresh_token")
  accessToken          String?   @map("access_token")
  accessTokenExpiresAt DateTime? @map("expires_at")
  idToken              String?   @map("id_token")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model verificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationToken")
}

model ZipCode {
  id   String @id @default(cuid())
  code String
  area String
  type String // 'seller' or 'buyer'
}

model AiResponse {
  id                Int      @id @default(autoincrement())
  category          String
  triggerPhrases    String[] @map("trigger_phrases")
  response          String
  tags              String[]
  autoResponse      Boolean  @default(true) @map("auto_response")
  escalateIfUnclear Boolean  @default(false) @map("escalate_if_unclear")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("ai_responses")
}
