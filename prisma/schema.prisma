generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id              String       @id @default(cuid())
  email           String       @unique
  mobilePhone     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  emailVerified   Boolean      @default(false)
  name            String
  addressLine1    String?
  addressLine2    String?
  city            String?
  neighborhood    String?
  state           String?
  zipCode         String?
  country         String?
  invitationsSent Invitation[] @relation("InvitationsSent")
  listings        Listing[]
  videos          Video[]
  members         Member[]
  answers         Question[]   @relation("QuestionAnsweredBy")
  approvals       Question[]   @relation("QuestionApprovedBy")
  questions       Question[]   @relation("QuestionCreatedBy")
  teamMemberships TeamMember[]
  accounts        account[]
  sessions        session[]

  @@index([email])
  @@index([zipCode])
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  logo        String?
  metadata    String?
  createdAt   DateTime     @default(now())
  invitations Invitation[]
  members     Member[]
  teams       Team[]
  sessions    session[]
}

model Member {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           user         @relation(fields: [userId], references: [id])
}

model Invitation {
  id             String       @id @default(cuid())
  email          String
  inviterId      String
  organizationId String
  role           String
  status         String
  expiresAt      DateTime
  createdAt      DateTime     @default(now())
  inviter        user         @relation("InvitationsSent", fields: [inviterId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Team {
  id             String       @id @default(cuid())
  name           String
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  teamMembers    TeamMember[]
  sessions       session[]
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id])
  user      user     @relation(fields: [userId], references: [id])
}

model session {
  id                   String        @id @default(cuid())
  userId               String
  activeOrganizationId String?
  activeTeamId         String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  expiresAt            DateTime
  token                String        @unique
  ipAddress            String?
  userAgent            String?
  organization         Organization? @relation(fields: [activeOrganizationId], references: [id])
  team                 Team?         @relation(fields: [activeTeamId], references: [id])
  user                 user          @relation(fields: [userId], references: [id])

  @@map("session")
}

model account {
  id                   String    @id @default(cuid())
  userId               String
  providerId           String    @map("provider")
  accountId            String    @map("providerAccountId")
  refreshToken         String?   @map("refresh_token")
  accessToken          String?   @map("access_token")
  idToken              String?   @map("id_token")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  accessTokenExpiresAt DateTime? @map("expires_at")
  password             String?
  user                 user      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model verificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationToken")
}

model ZipCode {
  id   String @id @default(cuid())
  code String
  area String
  type String
}

model AiResponse {
  id                Int      @id @default(autoincrement())
  category          String
  triggerPhrases    String[] @map("trigger_phrases")
  response          String
  tags              String[]
  autoResponse      Boolean  @default(true) @map("auto_response")
  escalateIfUnclear Boolean  @default(false) @map("escalate_if_unclear")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("ai_responses")
}

model Question {
  id             String   @id @default(cuid())
  question       String
  answer         String?
  createdAt      DateTime @default(now())
  answeredBy     String?
  approvedBy     String?
  createdBy      String
  updatedAt      DateTime @updatedAt
  isApproved     Boolean  @default(false)
  isPublic       Boolean  @default(false)
  listingId      String?
  answeredByUser user?    @relation("QuestionAnsweredBy", fields: [answeredBy], references: [id])
  approvedByUser user?    @relation("QuestionApprovedBy", fields: [approvedBy], references: [id])
  createdByUser  user     @relation("QuestionCreatedBy", fields: [createdBy], references: [id])
}

model Listing {
  id                   String    @id @default(cuid())
  userId               String
  itemId               String    @unique
  photos               Json
  videoUrl             String?
  department           String
  category             String
  subCategory          String
  title                String
  condition            String
  price                Float
  reservePrice         Float?
  description          String
  brand                String?
  height               String?
  width                String?
  depth                String?
  serialNumber         String?
  modelNumber          String?
  estimatedRetailPrice Float?
  discountSchedule     Json?
  isTreasure           Boolean   @default(false)
  treasureReason       String? // Why it's flagged as treasure
  treasureFlaggedAt    DateTime?
  treasureFlaggedBy    String? // User ID who flagged it
  // Meta Pixel API Integration
  metaProductId        String? // Meta's product ID
  metaCatalogId        String? // Meta's catalog ID
  metaLastSync         DateTime? // Last sync timestamp
  metaSyncStatus       String? // success/error/pending/deleted
  metaErrorDetails     String? // Error details if sync failed
  status               String    @default("active")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  views                Int       @default(0)

  // Facebook Shop Integration Fields
  facebookShopId      String?   @unique // Unique ID for Facebook Shop
  facebookCategory    String? // Facebook product category
  facebookCondition   String? // new/used/refurbished for Facebook
  facebookBrand       String? // Brand name for Facebook
  facebookGtin        String? // GTIN/UPC code (optional)
  facebookShopEnabled Boolean   @default(true) // Enable/disable Facebook sync
  facebookLastSync    DateTime? // Last successful sync timestamp
  facebookSyncStatus  String? // success/error/pending
  qualityChecked      Boolean   @default(false) // Quality check status

  // Product Availability & Pricing
  quantity               Int       @default(1) // Number of items available for sale
  salePrice              Float? // Discounted/sale price
  salePriceEffectiveDate DateTime? // When sale price is active

  // Product Specifications
  gender   String? // "male", "female", "unisex"
  color    String? // Product color
  size     String? // Product size
  ageGroup String? // "adult", "kids", "infant"
  material String? // Product material
  pattern  String? // Product pattern
  style    String? // Product style

  // Enhanced Categorization
  tags        String[] @default([]) // Product tags for better categorization
  itemGroupId String? // For product variants

  user         user             @relation(fields: [userId], references: [id])
  videos       Video[]
  priceHistory PriceHistory[]
  history      ListingHistory[]

  @@index([userId])
  @@index([status])
  @@index([department])
  @@index([facebookShopEnabled])
  @@index([facebookLastSync])
}

model PriceHistory {
  id        String   @id @default(cuid())
  listingId String
  price     Float
  createdAt DateTime @default(now())
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId])
  @@index([createdAt])
  @@map("price_history")
}

model ListingHistory {
  id          String   @id @default(cuid())
  listingId   String
  eventType   String // "created", "status_changed", "price_changed", "sold", "in_transit", etc.
  eventTitle  String // Human-readable title like "Listing Created", "Status Changed to Sold"
  description String // Detailed description of the event
  metadata    Json? // Additional data like old_value, new_value, etc.
  createdAt   DateTime @default(now())
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId])
  @@index([eventType])
  @@index([createdAt])
  @@map("listing_history")
}

model EarlyAccessSignup {
  id           String   @id @default(cuid())
  email        String   @unique
  signupNumber Int      @unique
  source       String   @default("website")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([email])
  @@index([signupNumber])
  @@map("early_access_signups")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  ipAddress String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([createdAt])
}

model TreasureDrop {
  id             String        @id @default(cuid())
  name           String
  location       Json // { lat: number, lng: number }
  radius         Float         @default(328) // Radius in feet (100 meters = ~328 feet)
  status         String        @default("active") // "active" | "found"
  clue           String
  image          String?
  reward         String
  foundBy        String?
  foundAt        DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  treasureCodeId String?       @unique
  treasureCode   TreasureCode? @relation(fields: [treasureCodeId], references: [id])

  @@index([status])
  @@index([createdAt])
  @@index([treasureCodeId])
}

model TreasureRedemption {
  id                String       @id @default(cuid())
  treasureCodeId    String
  firstName         String
  lastName          String
  email             String
  phone             String?
  venmoUsername     String?
  cashAppUsername   String?
  zelleEmail        String?
  paymentMethod     String
  selfieImageUrl    String?
  socialMediaPost   String?
  socialMediaBonus  Boolean      @default(false)
  paymentStatus     String       @default("pending")
  treasureHubCredit Boolean      @default(false)
  earlyAccessSent   Boolean      @default(false)
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  expiresAt         DateTime
  treasureCode      TreasureCode @relation(fields: [treasureCodeId], references: [id])

  @@index([treasureCodeId])
  @@index([email])
  @@index([paymentStatus])
}

model TreasureCode {
  id           String               @id @default(cuid())
  code         String               @unique
  isActive     Boolean              @default(true)
  maxUses      Int                  @default(1)
  currentUses  Int                  @default(0)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  treasureDrop TreasureDrop?
  redemptions  TreasureRedemption[]

  @@index([code])
  @@index([isActive])
}

model FacebookApiKey {
  id         String    @id @default(cuid())
  name       String // Human-readable name for the key
  apiKey     String    @unique // The actual API key
  isActive   Boolean   @default(true)
  lastUsed   DateTime?
  usageCount Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  createdBy  String // User ID who created the key

  @@index([apiKey])
  @@index([isActive])
  @@index([createdBy])
}

model Video {
  id               String  @id @default(cuid())
  userId           String
  originalFilename String
  originalSize     Int // File size in bytes
  duration         Float? // Video duration in seconds
  resolution       String? // e.g., "1920x1080"

  // File paths in S3
  rawVideoKey       String // Raw uploaded video
  processedVideoKey String? // Compressed video
  thumbnailKey      String? // Preview thumbnail
  frameKeys         Json? // Array of AI frame keys

  // Processing status
  status          String  @default("pending") // pending, processing, completed, failed
  processingError String? // Error message if processing failed

  // Metadata
  mimeType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     user      @relation(fields: [userId], references: [id])
  listings Listing[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// eBay Platform Notifications Models
model EbayNotification {
  id                  String   @id @default(cuid())
  notificationId      String   @unique // eBay's notification ID
  topic               String // e.g., "ITEM_UPDATED", "PRICE_CHANGED"
  dataSchema          String // eBay's data schema version
  dataVersion         String // eBay's data version
  eventId             String // eBay's event ID
  eventDate           DateTime // When the event occurred
  publishDate         DateTime // When eBay published the notification
  publishAttemptCount Int      @default(0)

  // Notification payload
  payload         Json // Full notification payload from eBay
  processed       Boolean @default(false)
  processingError String?

  // Related item tracking
  ebayItemId String?
  ebayItem   EbayItem? @relation(fields: [ebayItemId], references: [id])

  // Relations
  logs EbayNotificationLog[]

  // Audit fields
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  processedAt DateTime?

  @@index([notificationId])
  @@index([topic])
  @@index([eventDate])
  @@index([processed])
  @@index([ebayItemId])
}

model EbayItem {
  id          String  @id @default(cuid())
  ebayItemId  String  @unique // eBay's item ID
  title       String
  price       Decimal
  currency    String  @default("USD")
  condition   String?
  brand       String?
  modelNumber String?
  gtin        String?

  // Market data
  marketPrice     Decimal?
  priceHistory    Json? // Array of price changes
  lastPriceUpdate DateTime?

  // Status tracking
  status           String    @default("active") // active, sold, ended, error
  lastNotification DateTime?

  // Relations
  notifications EbayNotification[]

  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ebayItemId])
  @@index([status])
  @@index([lastPriceUpdate])
}

model EbayNotificationLog {
  id      String @id @default(cuid())
  level   String // info, warning, error
  message String
  context Json? // Additional context data

  // Related notification (optional)
  ebayNotificationId String?
  ebayNotification   EbayNotification? @relation(fields: [ebayNotificationId], references: [id])

  // Audit fields
  createdAt DateTime @default(now())

  @@index([level])
  @@index([createdAt])
  @@index([ebayNotificationId])
}
