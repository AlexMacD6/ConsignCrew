generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id               String          @id @default(cuid())
  email            String          @unique
  mobilePhone      String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  emailVerified    Boolean         @default(false)
  name             String
  addressLine1     String?
  addressLine2     String?
  city             String?
  neighborhood     String?
  state            String?
  zipCode          String?
  country          String?
  userType         String? // "buyer", "seller", or null for unspecified
  stripeCustomerId String? // Stripe customer ID for buyers
  inventoryLists   InventoryList[]
  invitationsSent  Invitation[]    @relation("InvitationsSent")
  listings         Listing[]
  members          Member[]
  answers          Question[]      @relation("QuestionAnsweredBy")
  approvals        Question[]      @relation("QuestionApprovedBy")
  questions        Question[]      @relation("QuestionCreatedBy")
  teamMemberships  TeamMember[]
  videos           Video[]
  accounts         account[]
  buyerOrders      Order[]         @relation("BuyerOrders")
  sellerOrders     Order[]         @relation("SellerOrders")
  sessions         session[]

  @@index([email])
  @@index([zipCode])
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  logo        String?
  metadata    String?
  createdAt   DateTime     @default(now())
  invitations Invitation[]
  members     Member[]
  teams       Team[]
  sessions    session[]
}

model Member {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           user         @relation(fields: [userId], references: [id])
}

model Invitation {
  id             String       @id @default(cuid())
  email          String
  inviterId      String
  organizationId String
  role           String
  status         String
  expiresAt      DateTime
  createdAt      DateTime     @default(now())
  inviter        user         @relation("InvitationsSent", fields: [inviterId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Team {
  id             String       @id @default(cuid())
  name           String
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  teamMembers    TeamMember[]
  sessions       session[]
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id])
  user      user     @relation(fields: [userId], references: [id])
}

model session {
  id                   String        @id @default(cuid())
  userId               String
  activeOrganizationId String?
  activeTeamId         String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  expiresAt            DateTime
  token                String        @unique
  ipAddress            String?
  userAgent            String?
  organization         Organization? @relation(fields: [activeOrganizationId], references: [id])
  team                 Team?         @relation(fields: [activeTeamId], references: [id])
  user                 user          @relation(fields: [userId], references: [id])

  @@map("session")
}

model account {
  id                   String    @id @default(cuid())
  userId               String
  providerId           String    @map("provider")
  accountId            String    @map("providerAccountId")
  refreshToken         String?   @map("refresh_token")
  accessToken          String?   @map("access_token")
  idToken              String?   @map("id_token")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  accessTokenExpiresAt DateTime? @map("expires_at")
  password             String?
  user                 user      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model verificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationToken")
}

model verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model ZipCode {
  id   String @id @default(cuid())
  code String
  area String
  type String
}

model AiResponse {
  id                Int      @id @default(autoincrement())
  category          String
  triggerPhrases    String[] @map("trigger_phrases")
  response          String
  tags              String[]
  autoResponse      Boolean  @default(true) @map("auto_response")
  escalateIfUnclear Boolean  @default(false) @map("escalate_if_unclear")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("ai_responses")
}

model Question {
  id             String   @id @default(cuid())
  question       String
  answer         String?
  createdAt      DateTime @default(now())
  answeredBy     String?
  approvedBy     String?
  createdBy      String
  updatedAt      DateTime @updatedAt
  isApproved     Boolean  @default(false)
  isPublic       Boolean  @default(false)
  listingId      String?
  answeredByUser user?    @relation("QuestionAnsweredBy", fields: [answeredBy], references: [id])
  approvedByUser user?    @relation("QuestionApprovedBy", fields: [approvedBy], references: [id])
  createdByUser  user     @relation("QuestionCreatedBy", fields: [createdBy], references: [id])
}

model Listing {
  id                     String           @id @default(cuid())
  userId                 String
  itemId                 String           @unique
  photos                 Json
  department             String
  category               String
  subCategory            String
  title                  String
  price                  Float
  description            String
  brand                  String?
  serialNumber           String?
  modelNumber            String?
  estimatedRetailPrice   Float?
  discountSchedule       Json?
  status                 String           @default("active")
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  views                  Int              @default(0)
  videoUrl               String?
  reservePrice           Float?
  depth                  String?
  height                 String?
  width                  String?
  facebookBrand          String?
  facebookCategory       String?
  facebookCondition      String?
  facebookGtin           String?
  facebookLastSync       DateTime?
  facebookShopEnabled    Boolean          @default(true)
  facebookShopId         String?          @unique
  facebookSyncStatus     String?
  qualityChecked         Boolean          @default(false)
  ageGroup               String?
  color                  String?
  gender                 String?
  itemGroupId            String?
  material               String?
  pattern                String?
  quantity               Int              @default(1)
  salePrice              Float?
  salePriceEffectiveDate DateTime?
  size                   String?
  style                  String?
  tags                   String[]         @default([])
  isTreasure             Boolean          @default(false)
  metaCatalogId          String?
  metaErrorDetails       String?
  metaLastSync           DateTime?
  metaProductId          String?
  metaSyncStatus         String?
  treasureFlaggedAt      DateTime?
  treasureFlaggedBy      String?
  treasureReason         String?
  flawData               Json?
  googleProductCategory  String?
  heldUntil              DateTime?
  isHeld                 Boolean          @default(false)
  user                   user             @relation(fields: [userId], references: [id])
  history                ListingHistory[]
  orders                 Order[]
  priceHistory           PriceHistory[]
  inventoryItems         InventoryItem[]  @relation("InventoryItemToListing")
  inventoryLists         InventoryList[]  @relation("InventoryListToListing")
  videos                 Video[]          @relation("ListingToVideo")

  @@index([userId])
  @@index([status])
  @@index([department])
  @@index([facebookShopEnabled])
  @@index([facebookLastSync])
}

model PriceHistory {
  id        String   @id @default(cuid())
  listingId String
  price     Float
  createdAt DateTime @default(now())
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId])
  @@index([createdAt])
  @@map("price_history")
}

model ListingHistory {
  id          String   @id @default(cuid())
  listingId   String
  eventType   String
  eventTitle  String
  description String
  metadata    Json?
  createdAt   DateTime @default(now())
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId])
  @@index([eventType])
  @@index([createdAt])
  @@map("listing_history")
}

model EarlyAccessSignup {
  id           String   @id @default(cuid())
  email        String   @unique
  signupNumber Int      @unique
  source       String   @default("website")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([email])
  @@index([signupNumber])
  @@map("early_access_signups")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  ipAddress String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([createdAt])
}

model TreasureDrop {
  id             String        @id @default(cuid())
  name           String
  location       Json
  status         String        @default("active")
  clue           String
  image          String?
  reward         String
  foundBy        String?
  foundAt        DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  treasureCodeId String?       @unique
  radius         Float         @default(328)
  treasureCode   TreasureCode? @relation(fields: [treasureCodeId], references: [id])

  @@index([status])
  @@index([createdAt])
  @@index([treasureCodeId])
}

model TreasureRedemption {
  id                String       @id @default(cuid())
  firstName         String
  lastName          String
  email             String
  phone             String?
  venmoUsername     String?
  cashAppUsername   String?
  zelleEmail        String?
  paymentMethod     String
  selfieImageUrl    String?
  socialMediaPost   String?
  socialMediaBonus  Boolean      @default(false)
  paymentStatus     String       @default("pending")
  treasureHubCredit Boolean      @default(false)
  earlyAccessSent   Boolean      @default(false)
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  expiresAt         DateTime
  treasureCodeId    String
  treasureCode      TreasureCode @relation(fields: [treasureCodeId], references: [id])

  @@index([treasureCodeId])
  @@index([email])
  @@index([paymentStatus])
}

model TreasureCode {
  id           String               @id @default(cuid())
  code         String               @unique
  isActive     Boolean              @default(true)
  maxUses      Int                  @default(1)
  currentUses  Int                  @default(0)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  treasureDrop TreasureDrop?
  redemptions  TreasureRedemption[]

  @@index([code])
  @@index([isActive])
}

model FacebookApiKey {
  id         String    @id @default(cuid())
  name       String
  apiKey     String    @unique
  isActive   Boolean   @default(true)
  lastUsed   DateTime?
  usageCount Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  createdBy  String

  @@index([apiKey])
  @@index([isActive])
  @@index([createdBy])
}

model Video {
  id                String    @id @default(cuid())
  userId            String
  originalFilename  String
  originalSize      Int
  duration          Float?
  resolution        String?
  rawVideoKey       String
  processedVideoKey String?
  thumbnailKey      String?
  frameKeys         Json?
  status            String    @default("pending")
  processingError   String?
  mimeType          String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              user      @relation(fields: [userId], references: [id])
  listings          Listing[] @relation("ListingToVideo")

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model EbayNotification {
  id                  String                @id @default(cuid())
  notificationId      String                @unique
  topic               String
  dataSchema          String
  dataVersion         String
  eventId             String
  eventDate           DateTime
  publishDate         DateTime
  publishAttemptCount Int                   @default(0)
  payload             Json
  processed           Boolean               @default(false)
  processingError     String?
  ebayItemId          String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  processedAt         DateTime?
  ebayItem            EbayItem?             @relation(fields: [ebayItemId], references: [id])
  logs                EbayNotificationLog[]

  @@index([notificationId])
  @@index([topic])
  @@index([eventDate])
  @@index([processed])
  @@index([ebayItemId])
}

model EbayItem {
  id               String             @id @default(cuid())
  ebayItemId       String             @unique
  title            String
  price            Decimal
  currency         String             @default("USD")
  condition        String?
  brand            String?
  modelNumber      String?
  gtin             String?
  marketPrice      Decimal?
  priceHistory     Json?
  lastPriceUpdate  DateTime?
  status           String             @default("active")
  lastNotification DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  notifications    EbayNotification[]

  @@index([ebayItemId])
  @@index([status])
  @@index([lastPriceUpdate])
}

model EbayNotificationLog {
  id                 String            @id @default(cuid())
  level              String
  message            String
  context            Json?
  ebayNotificationId String?
  createdAt          DateTime          @default(now())
  ebayNotification   EbayNotification? @relation(fields: [ebayNotificationId], references: [id])

  @@index([level])
  @@index([createdAt])
  @@index([ebayNotificationId])
}

model InventoryList {
  id                  String          @id @default(cuid())
  name                String
  lotNumber           String?
  datePurchased       DateTime?
  briefDescription    String?
  createdBy           String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  msrpPercentage      Float?
  serviceCharges      Float?
  shippingCharges     Float?
  totalExtRetailValue Float?
  totalPurchasePrice  Float?
  winningBidAmount    Float?
  items               InventoryItem[]
  user                user?           @relation(fields: [createdBy], references: [id])
  listings            Listing[]       @relation("InventoryListToListing")

  @@index([createdBy])
}

model InventoryItem {
  id            String        @id @default(cuid())
  listId        String
  lotNumber     String?
  itemNumber    String?
  deptCode      String?
  department    String?
  description   String?
  quantity      Int?
  unitRetail    Float?
  extRetail     Float?
  vendor        String?
  categoryCode  String?
  category      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  purchasePrice Float?
  list          InventoryList @relation(fields: [listId], references: [id], onDelete: Cascade)
  listings      Listing[]     @relation("InventoryItemToListing")

  @@unique([listId, itemNumber])
  @@index([listId])
  @@index([itemNumber])
}

model Order {
  id                      String      @id @default(cuid())
  listingId               String
  buyerId                 String
  sellerId                String
  stripePaymentIntentId   String?     @unique
  stripeCheckoutSessionId String?     @unique
  stripeChargeId          String?
  amount                  Float
  currency                String      @default("usd")
  status                  OrderStatus @default(PENDING)
  shippingAddress         Json?
  trackingNumber          String?
  deliveredAt             DateTime?
  finalizedAt             DateTime?
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  disputeReason           String?
  disputeCreatedAt        DateTime?
  checkoutExpiresAt       DateTime?
  isHeld                  Boolean     @default(false)
  buyer                   user        @relation("BuyerOrders", fields: [buyerId], references: [id])
  listing                 Listing     @relation(fields: [listingId], references: [id])
  seller                  user        @relation("SellerOrders", fields: [sellerId], references: [id])

  @@index([listingId])
  @@index([buyerId])
  @@index([sellerId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  FINALIZED
  DISPUTED
  CANCELLED
  REFUNDED
}
