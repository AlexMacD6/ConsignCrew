# Facebook Shop Feed Endpoint Requirements

## Overview
Create a product feed endpoint that generates an XML feed compatible with Facebook Shop requirements, allowing TreasureHub listings to be synced with Facebook's marketplace.

## Problem
Facebook Shop requires a standardized product feed to display marketplace items. Without this endpoint, TreasureHub listings cannot be integrated with Facebook's shopping platform.

## Solution
Create a dedicated API endpoint that generates an XML feed in the Google Shopping format, which Facebook Shop accepts.

## Implementation Details

### 1. Feed Endpoint
- **File**: `app/api/facebook-shop/feed/route.ts` (new)
- **Method**: GET
- **URL**: `https://treasurehub.club/api/facebook-shop/feed`
- **Format**: XML (RSS with Google Shopping namespace)

### 2. Data Source
- **Source**: Active listings from database
- **Filter**: Only listings with `facebookShopEnabled: true`
- **Include**: User information for seller details
- **Order**: By `updatedAt` descending (most recent first)

### 3. Required Fields Mapping
- **Product ID**: `listing.id`
- **Title**: `listing.title`
- **Description**: `listing.description`
- **Price**: `listing.price + 15% service fee`
- **Availability**: Based on `listing.status`
- **Condition**: Mapped from TreasureHub condition to Facebook format
- **Brand**: `listing.facebookBrand` or `listing.brand` or 'TreasureHub'
- **Image**: First photo from `listing.photos` array
- **URL**: Product page URL
- **Category**: Department > Category hierarchy
- **Location**: Neighborhood and zip code as custom labels

### 4. XML Structure
```xml
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:g="http://base.google.com/ns/1.0">
  <channel>
    <title>TreasureHub Product Feed</title>
    <link>https://treasurehub.club</link>
    <description>TreasureHub marketplace products for Facebook Shop</description>
    <language>en-US</language>
    <item>
      <g:id>product_id</g:id>
      <g:title>Product Title</g:title>
      <g:description>Product Description</g:description>
      <g:link>Product URL</g:link>
      <g:image_link>Image URL</g:image_link>
      <g:availability>in stock</g:availability>
      <g:price>100.00 USD</g:price>
      <g:brand>Brand Name</g:brand>
      <g:condition>new</g:condition>
      <g:product_type>Department > Category</g:product_type>
      <g:google_product_category>293</g:google_product_category>
      <g:custom_label_0>Neighborhood</g:custom_label_0>
      <g:custom_label_1>Zip Code</g:custom_label_1>
      <g:custom_label_2>Seller Name</g:custom_label_2>
      <g:shipping_weight>
        <g:value>1</g:value>
        <g:unit>lb</g:unit>
      </g:shipping_weight>
      <g:shipping>
        <g:country>US</g:country>
        <g:service>Standard</g:service>
        <g:price>0 USD</g:price>
      </g:shipping>
    </item>
  </channel>
</rss>
```

### 5. Condition Mapping
- **new** → new
- **like-new** → new
- **excellent** → used
- **good** → used
- **fair** → used
- **poor** → used
- **refurbished** → refurbished

### 6. Category Mapping
- **Electronics**: 293
- **Clothing**: 1604
- **Home & Garden**: 1592
- **Sports & Outdoors**: 888
- **Toys & Games**: 220
- **Books**: 266
- **Automotive**: 261
- **Health & Beauty**: 180
- **Jewelry**: 281
- **Tools**: 631
- **Collectibles**: 220
- **Antiques**: 220

### 7. Features
- **XML Escaping**: Properly escape special characters
- **Caching**: 1-hour cache for performance
- **Error Handling**: Graceful error responses
- **Service Fee**: Include 15% service fee in displayed price
- **Shipping**: Free standard shipping included
- **Custom Labels**: Neighborhood, zip code, and seller name

## Usage Instructions

### For Facebook Shop Setup:
1. **Feed URL**: `https://treasurehub.club/api/facebook-shop/feed`
2. **Update Frequency**: Daily (Facebook recommends)
3. **Format**: XML (RSS with Google Shopping namespace)
4. **Encoding**: UTF-8

### For Testing:
1. **Local Development**: `http://localhost:3000/api/facebook-shop/feed`
2. **Production**: `https://treasurehub.club/api/facebook-shop/feed`
3. **Validation**: Use Facebook's feed validator tool

## Benefits
- **Facebook Integration**: Seamless connection to Facebook Shop
- **Increased Reach**: Access to Facebook's massive user base
- **Standardized Format**: Compatible with other shopping platforms
- **Automatic Updates**: Real-time product data
- **Performance**: Cached responses for fast loading
- **Scalable**: Handles large product catalogs efficiently

## Testing Instructions

1. **Endpoint Access**:
   - Visit `/api/facebook-shop/feed` in browser
   - Verify XML response loads correctly
   - Check that all required fields are present

2. **Data Validation**:
   - Confirm only active listings appear
   - Verify Facebook Shop enabled filter works
   - Check price calculations include service fee

3. **XML Format**:
   - Validate XML structure
   - Test with Facebook's feed validator
   - Ensure proper escaping of special characters

4. **Performance**:
   - Test with large number of listings
   - Verify caching headers are set
   - Check response times are acceptable 