# Organization-Based Permissions System

## Problem
The application was using a simple `isAdmin` boolean field for access control, which is not scalable and doesn't follow proper role-based access control (RBAC) principles. A more sophisticated approach using organization membership was needed.

## Solution Implemented
Replaced the `isAdmin` field with organization-based permissions, specifically checking for TreasureHub organization membership to grant administrative privileges.

## Requirements

### 1. Permission Model
- **Organization-Based**: Use organization membership instead of simple boolean flags
- **TreasureHub Members**: Users who belong to the "TreasureHub" organization get administrative privileges
- **Scalable**: Easy to extend for other organizations and roles
- **Secure**: Server-side verification of organization membership

### 2. Implementation Changes

#### Files Modified
1. **`app/components/CustomQRCode.tsx`** - Updated to use organization-based permissions
2. **`app/(dashboard)/list-item/[id]/page.tsx`** - Replaced isAdmin with organization checks
3. **`app/api/profile/organizations/route.ts`** - New API endpoint for fetching user organizations

#### Key Changes Made

**CustomQRCode Component:**
```typescript
// BEFORE
interface CustomQRCodeProps {
  isAdmin?: boolean;
}

// AFTER  
interface CustomQRCodeProps {
  userOrganizations?: any[];
}

// Permission check
const isTreasureHubMember = userOrganizations.some(
  (org) => org.slug === 'treasurehub' || org.name?.toLowerCase() === 'treasurehub'
);
```

**Listing Detail Page:**
```typescript
// BEFORE
const [isAdmin, setIsAdmin] = useState(false);

// AFTER
const [userOrganizations, setUserOrganizations] = useState<any[]>([]);
const isTreasureHubMember = userOrganizations.some(
  (org) => org.slug === 'treasurehub' || org.name?.toLowerCase() === 'treasurehub'
);
```

### 3. API Integration

#### New Organizations Endpoint
**Route**: `/api/profile/organizations`
**Method**: GET
**Purpose**: Fetch user's organization memberships

```typescript
// Returns user's organizations
{
  success: true,
  organizations: [
    {
      id: "org_id",
      name: "TreasureHub", 
      slug: "treasurehub",
      logo: "logo_url"
    }
  ]
}
```

#### Permission Logic
```typescript
// Check organization membership
const isTreasureHubMember = userOrganizations.some(
  (org) => org.slug === 'treasurehub' || org.name?.toLowerCase() === 'treasurehub'
);
```

### 4. Features Affected

#### **Print Label Button**
- **Before**: Only visible to users with `isAdmin: true`
- **After**: Only visible to TreasureHub organization members

#### **AI Similarity Score**
- **Before**: Only visible to admin users
- **After**: Only visible to TreasureHub organization members

#### **Questions Display**
- **Before**: Admin features based on `isAdmin` prop
- **After**: Admin features based on TreasureHub membership

### 5. Benefits

#### **ðŸŽ¯ Scalability**
- **Multiple Organizations**: Easy to add permissions for other organizations
- **Role-Based Access**: Foundation for more sophisticated role systems
- **Maintainable**: Centralized permission logic

#### **ðŸ”’ Security**
- **Server-Side Verification**: Organization membership verified by API
- **Granular Control**: Can be extended for specific organizational roles
- **Audit Trail**: Clear tracking of who has access based on organization membership

#### **ðŸ”§ Code Quality**
- **Single Source of Truth**: Organization membership drives permissions
- **Consistent**: Same permission model across all components
- **Extensible**: Easy to add new permission checks

### 6. Database Structure

**Existing Schema (Leveraged):**
```sql
-- Users belong to organizations through memberships
user -> members -> organization

-- Organization structure
Organization {
  id: String
  name: String  
  slug: String (unique)
  logo: String?
}

-- Membership structure  
Member {
  userId: String
  organizationId: String
  role: String (ADMIN, OWNER, MEMBER)
}
```

### 7. Usage Pattern

#### **In Components:**
```typescript
// Fetch user organizations
const [userOrganizations, setUserOrganizations] = useState([]);

useEffect(() => {
  fetchUserOrganizations();
}, [isAuthenticated]);

// Check permissions
const isTreasureHubMember = userOrganizations.some(
  (org) => org.slug === 'treasurehub'
);

// Use in rendering
{isTreasureHubMember && <AdminFeature />}
```

#### **In API Calls:**
```typescript
const res = await fetch("/api/profile/organizations");
const data = await res.json();
setUserOrganizations(data.organizations || []);
```

### 8. Testing Instructions

#### **TreasureHub Member Testing:**
1. **Login** as user belonging to TreasureHub organization
2. **Navigate** to listing detail page
3. **Verify** Print Label button appears in QR Code section
4. **Verify** AI Similarity Score section is visible
5. **Check** Questions Display has admin features

#### **Non-Member Testing:**
1. **Login** as regular user (not in TreasureHub org)
2. **Navigate** to listing detail page  
3. **Verify** no Print Label button visible
4. **Verify** no AI Similarity Score section
5. **Check** Questions Display has normal user features

#### **Organization Data Testing:**
1. **Check** organizations API endpoint returns correct data
2. **Verify** permission checks work with both `slug` and `name` matching
3. **Test** graceful handling when organizations array is empty

## Future Extensions

### **Role-Based Permissions:**
```typescript
// Can be extended for specific roles
const isOrgAdmin = userOrganizations.some(
  (org) => org.slug === 'treasurehub' && 
  user.members.find(m => m.organizationId === org.id)?.role === 'ADMIN'
);
```

### **Multi-Organization Support:**
```typescript
// Support for multiple organization permissions
const hasPermission = (requiredOrg: string) => 
  userOrganizations.some(org => org.slug === requiredOrg);
```

This organization-based permission system provides a solid foundation for scalable access control while maintaining security and code quality.
