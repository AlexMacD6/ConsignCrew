# Flaw Detection Accuracy Fix Requirements

## Problem
The flaw tags displayed on the edit listing page appear "randomly generated" and "don't match the photos at all". This indicates a critical issue with the AI flaw detection accuracy and data association.

## Root Cause Analysis
1. **Critical Bug in API**: The `validateAndCleanFlawData` function in `app/api/ai/detect-flaws-enhanced/route.ts` had two return statements, with the second one being unreachable but indicating incorrect logic was intended.

2. **Missing Database Save**: The `flawData` field was not being saved to the database in the PUT route (`app/api/listings/[id]/route.ts`), causing flaw data to be lost when listings were updated.

3. **Poor Photo Association**: The AI prompt was not explicit enough about associating flaws with specific photos, leading to incorrect photo-flaw mappings.

## Requirements

### 1. Fix API Logic Bug
- Remove the duplicate return statement in `validateAndCleanFlawData` function
- Ensure only the highest confidence flaw per photo is returned
- Add comprehensive logging to debug flaw detection process

### 2. Fix Database Save Issue
- Add `flawData` field to the PUT route destructuring
- Include `flawData` in the Prisma update operation
- Add `isTreasure` and `treasureReason` fields for completeness

### 3. Improve AI Prompt
- Make photo association more explicit in the AI prompt
- List photos with their index numbers for clear reference
- Emphasize the importance of accurate photo-flaw mapping
- Increase confidence threshold to 99% for more accurate detection

### 4. Add Debugging
- Add console logging throughout the flaw detection process
- Log raw AI responses, validation steps, and final results
- Track photo-flaw associations for verification

## Technical Implementation

### API Endpoint Fixes
- `app/api/ai/detect-flaws-enhanced/route.ts`: Fix validation logic and improve prompt
- `app/api/listings/[id]/route.ts`: Add flawData to PUT route

### Frontend Integration
- `app/(dashboard)/list-item/[id]/edit/page.tsx`: Ensure flaw data is properly loaded and displayed

## Testing Steps
1. Create a new listing with multiple photos
2. Trigger flaw detection via AI
3. Verify flaw tags appear on correct photos in edit page
4. Edit flaw descriptions and save
5. Reload page to ensure flaw data persists
6. Check console logs for debugging information

## Expected Outcome
- Flaw tags should accurately reflect actual flaws visible in the photos
- Each flaw should be associated with the correct photo
- Flaw data should persist when listings are updated
- Only high-confidence (99%+) flaws should be displayed 